# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _schema
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


slept = _schema.slept
active = _schema.active
notready = _schema.notready
ready = _schema.ready
forced = _schema.forced
winner = _schema.winner
off = _schema.off
on = _schema.on
pending_off = _schema.pending_off
pending_on = _schema.pending_on
class JDESchema(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JDESchema, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JDESchema, name)
    __repr__ = _swig_repr
    __swig_setmethods__["handle"] = _schema.JDESchema_handle_set
    __swig_getmethods__["handle"] = _schema.JDESchema_handle_get
    if _newclass:handle = _swig_property(_schema.JDESchema_handle_get, _schema.JDESchema_handle_set)
    __swig_setmethods__["name"] = _schema.JDESchema_name_set
    __swig_getmethods__["name"] = _schema.JDESchema_name_get
    if _newclass:name = _swig_property(_schema.JDESchema_name_get, _schema.JDESchema_name_set)
    __swig_setmethods__["id"] = _schema.JDESchema_id_set
    __swig_getmethods__["id"] = _schema.JDESchema_id_get
    if _newclass:id = _swig_property(_schema.JDESchema_id_get, _schema.JDESchema_id_set)
    __swig_setmethods__["state"] = _schema.JDESchema_state_set
    __swig_getmethods__["state"] = _schema.JDESchema_state_get
    if _newclass:state = _swig_property(_schema.JDESchema_state_get, _schema.JDESchema_state_set)
    __swig_setmethods__["guistate"] = _schema.JDESchema_guistate_set
    __swig_getmethods__["guistate"] = _schema.JDESchema_guistate_get
    if _newclass:guistate = _swig_property(_schema.JDESchema_guistate_get, _schema.JDESchema_guistate_set)
    __swig_setmethods__["father"] = _schema.JDESchema_father_set
    __swig_getmethods__["father"] = _schema.JDESchema_father_get
    if _newclass:father = _swig_property(_schema.JDESchema_father_get, _schema.JDESchema_father_set)
    __swig_setmethods__["children"] = _schema.JDESchema_children_set
    __swig_getmethods__["children"] = _schema.JDESchema_children_get
    if _newclass:children = _swig_property(_schema.JDESchema_children_get, _schema.JDESchema_children_set)
    __swig_setmethods__["fps"] = _schema.JDESchema_fps_set
    __swig_getmethods__["fps"] = _schema.JDESchema_fps_get
    if _newclass:fps = _swig_property(_schema.JDESchema_fps_get, _schema.JDESchema_fps_set)
    __swig_setmethods__["k"] = _schema.JDESchema_k_set
    __swig_getmethods__["k"] = _schema.JDESchema_k_get
    if _newclass:k = _swig_property(_schema.JDESchema_k_get, _schema.JDESchema_k_set)
    def init(*args): return _schema.JDESchema_init(*args)
    def terminate(*args): return _schema.JDESchema_terminate(*args)
    def stop(*args): return _schema.JDESchema_stop(*args)
    def run(*args): return _schema.JDESchema_run(*args)
    def show(*args): return _schema.JDESchema_show(*args)
    def hide(*args): return _schema.JDESchema_hide(*args)
    def get_state(*args): return _schema.JDESchema_get_state(*args)
    def set_state(*args): return _schema.JDESchema_set_state(*args)
    def speedcounter(*args): return _schema.JDESchema_speedcounter(*args)
    def __init__(self, *args): 
        this = _schema.new_JDESchema(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _schema.delete_JDESchema
    __del__ = lambda self : None;
JDESchema_swigregister = _schema.JDESchema_swigregister
JDESchema_swigregister(JDESchema)

class JDEDriver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JDEDriver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JDEDriver, name)
    __repr__ = _swig_repr
    __swig_setmethods__["handle"] = _schema.JDEDriver_handle_set
    __swig_getmethods__["handle"] = _schema.JDEDriver_handle_get
    if _newclass:handle = _swig_property(_schema.JDEDriver_handle_get, _schema.JDEDriver_handle_set)
    __swig_setmethods__["name"] = _schema.JDEDriver_name_set
    __swig_getmethods__["name"] = _schema.JDEDriver_name_get
    if _newclass:name = _swig_property(_schema.JDEDriver_name_get, _schema.JDEDriver_name_set)
    __swig_setmethods__["id"] = _schema.JDEDriver_id_set
    __swig_getmethods__["id"] = _schema.JDEDriver_id_get
    if _newclass:id = _swig_property(_schema.JDEDriver_id_get, _schema.JDEDriver_id_set)
    def init(*args): return _schema.JDEDriver_init(*args)
    def terminate(*args): return _schema.JDEDriver_terminate(*args)
    def __init__(self, *args): 
        this = _schema.new_JDEDriver(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _schema.delete_JDEDriver
    __del__ = lambda self : None;
JDEDriver_swigregister = _schema.JDEDriver_swigregister
JDEDriver_swigregister(JDEDriver)



