// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `primitives.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot__home_fran_fqez_build_src_interfaces_cpp_jderobot_primitives_h__
#define __jderobot__home_fran_fqez_build_src_interfaces_cpp_jderobot_primitives_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <jderobot/common.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace jderobot
{

struct RGBPoint
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Float r;
    ::Ice::Float g;
    ::Ice::Float b;
    ::Ice::Int id;
};

struct Point
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
};

struct Segment
{
    ::jderobot::Point fromPoint;
    ::jderobot::Point toPoint;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::jderobot::RGBPoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 28;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::jderobot::RGBPoint, S>
{
    static void write(S* __os, const ::jderobot::RGBPoint& v)
    {
        __os->write(v.x);
        __os->write(v.y);
        __os->write(v.z);
        __os->write(v.r);
        __os->write(v.g);
        __os->write(v.b);
        __os->write(v.id);
    }
};

template<class S>
struct StreamReader< ::jderobot::RGBPoint, S>
{
    static void read(S* __is, ::jderobot::RGBPoint& v)
    {
        __is->read(v.x);
        __is->read(v.y);
        __is->read(v.z);
        __is->read(v.r);
        __is->read(v.g);
        __is->read(v.b);
        __is->read(v.id);
    }
};

template<>
struct StreamableTraits< ::jderobot::Point>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::jderobot::Point, S>
{
    static void write(S* __os, const ::jderobot::Point& v)
    {
        __os->write(v.x);
        __os->write(v.y);
        __os->write(v.z);
    }
};

template<class S>
struct StreamReader< ::jderobot::Point, S>
{
    static void read(S* __is, ::jderobot::Point& v)
    {
        __is->read(v.x);
        __is->read(v.y);
        __is->read(v.z);
    }
};

template<>
struct StreamableTraits< ::jderobot::Segment>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::jderobot::Segment, S>
{
    static void write(S* __os, const ::jderobot::Segment& v)
    {
        __os->write(v.fromPoint);
        __os->write(v.toPoint);
    }
};

template<class S>
struct StreamReader< ::jderobot::Segment, S>
{
    static void read(S* __is, ::jderobot::Segment& v)
    {
        __is->read(v.fromPoint);
        __is->read(v.toPoint);
    }
};

}

#include <IceUtil/PopDisableWarnings.h>
#endif
