// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `bodyencoders.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot__home_fran_fqez_build_src_interfaces_cpp_jderobot_bodyencoders_h__
#define __jderobot__home_fran_fqez_build_src_interfaces_cpp_jderobot_bodyencoders_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <jderobot/common.h>
#include <jderobot/body.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace jderobot
{

class ArmEncodersData;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::ArmEncodersData>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::ArmEncodersData*);

class LegEncodersData;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::LegEncodersData>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::LegEncodersData*);

class OdometryData;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::OdometryData>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::OdometryData*);

class BodyEncoders;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::BodyEncoders>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::BodyEncoders*);

}

}

namespace jderobot
{

class ArmEncodersData;
::Ice::Object* upCast(::jderobot::ArmEncodersData*);
typedef ::IceInternal::Handle< ::jderobot::ArmEncodersData> ArmEncodersDataPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::ArmEncodersData> ArmEncodersDataPrx;
void __patch(ArmEncodersDataPtr&, const ::Ice::ObjectPtr&);

class LegEncodersData;
::Ice::Object* upCast(::jderobot::LegEncodersData*);
typedef ::IceInternal::Handle< ::jderobot::LegEncodersData> LegEncodersDataPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::LegEncodersData> LegEncodersDataPrx;
void __patch(LegEncodersDataPtr&, const ::Ice::ObjectPtr&);

class OdometryData;
::Ice::Object* upCast(::jderobot::OdometryData*);
typedef ::IceInternal::Handle< ::jderobot::OdometryData> OdometryDataPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::OdometryData> OdometryDataPrx;
void __patch(OdometryDataPtr&, const ::Ice::ObjectPtr&);

class BodyEncoders;
::Ice::Object* upCast(::jderobot::BodyEncoders*);
typedef ::IceInternal::Handle< ::jderobot::BodyEncoders> BodyEncodersPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::BodyEncoders> BodyEncodersPrx;
void __patch(BodyEncodersPtr&, const ::Ice::ObjectPtr&);

}

namespace jderobot
{

class Callback_BodyEncoders_getArmEncodersData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BodyEncoders_getArmEncodersData_Base> Callback_BodyEncoders_getArmEncodersDataPtr;

class Callback_BodyEncoders_getLegEncodersData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BodyEncoders_getLegEncodersData_Base> Callback_BodyEncoders_getLegEncodersDataPtr;

class Callback_BodyEncoders_getOdometryData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BodyEncoders_getOdometryData_Base> Callback_BodyEncoders_getOdometryDataPtr;

}

namespace IceProxy
{

namespace jderobot
{

class ArmEncodersData : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_secure(bool __secure) const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_twoway() const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_oneway() const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_batchOneway() const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_datagram() const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_batchDatagram() const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_compress(bool __compress) const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ArmEncodersData> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ArmEncodersData*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class LegEncodersData : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_secure(bool __secure) const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_twoway() const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_oneway() const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_batchOneway() const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_datagram() const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_batchDatagram() const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_compress(bool __compress) const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_timeout(int __timeout) const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<LegEncodersData> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<LegEncodersData*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class OdometryData : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<OdometryData> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<OdometryData> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<OdometryData> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<OdometryData> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<OdometryData> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<OdometryData> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<OdometryData> ice_secure(bool __secure) const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<OdometryData> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<OdometryData> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<OdometryData> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<OdometryData> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<OdometryData> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<OdometryData> ice_twoway() const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<OdometryData> ice_oneway() const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<OdometryData> ice_batchOneway() const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<OdometryData> ice_datagram() const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<OdometryData> ice_batchDatagram() const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<OdometryData> ice_compress(bool __compress) const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<OdometryData> ice_timeout(int __timeout) const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<OdometryData> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<OdometryData> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<OdometryData*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class BodyEncoders : virtual public ::IceProxy::Ice::Object
{
public:

    ::jderobot::ArmEncodersDataPtr getArmEncodersData(::jderobot::BodySide __p_side)
    {
        return getArmEncodersData(__p_side, 0);
    }
    ::jderobot::ArmEncodersDataPtr getArmEncodersData(::jderobot::BodySide __p_side, const ::Ice::Context& __ctx)
    {
        return getArmEncodersData(__p_side, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getArmEncodersData(::jderobot::BodySide __p_side, const ::IceInternal::Function<void (const ::jderobot::ArmEncodersDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getArmEncodersData(__p_side, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getArmEncodersData(::jderobot::BodySide __p_side, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getArmEncodersData(__p_side, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getArmEncodersData(::jderobot::BodySide __p_side, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::jderobot::ArmEncodersDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getArmEncodersData(__p_side, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getArmEncodersData(::jderobot::BodySide __p_side, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getArmEncodersData(__p_side, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getArmEncodersData(::jderobot::BodySide __p_side, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::jderobot::ArmEncodersDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getArmEncodersData(::jderobot::BodySide __p_side)
    {
        return begin_getArmEncodersData(__p_side, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getArmEncodersData(::jderobot::BodySide __p_side, const ::Ice::Context& __ctx)
    {
        return begin_getArmEncodersData(__p_side, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getArmEncodersData(::jderobot::BodySide __p_side, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getArmEncodersData(__p_side, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getArmEncodersData(::jderobot::BodySide __p_side, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getArmEncodersData(__p_side, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getArmEncodersData(::jderobot::BodySide __p_side, const ::jderobot::Callback_BodyEncoders_getArmEncodersDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getArmEncodersData(__p_side, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getArmEncodersData(::jderobot::BodySide __p_side, const ::Ice::Context& __ctx, const ::jderobot::Callback_BodyEncoders_getArmEncodersDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getArmEncodersData(__p_side, &__ctx, __del, __cookie);
    }

    ::jderobot::ArmEncodersDataPtr end_getArmEncodersData(const ::Ice::AsyncResultPtr&);
    
private:

    ::jderobot::ArmEncodersDataPtr getArmEncodersData(::jderobot::BodySide, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getArmEncodersData(::jderobot::BodySide, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::jderobot::LegEncodersDataPtr getLegEncodersData(::jderobot::BodySide __p_side)
    {
        return getLegEncodersData(__p_side, 0);
    }
    ::jderobot::LegEncodersDataPtr getLegEncodersData(::jderobot::BodySide __p_side, const ::Ice::Context& __ctx)
    {
        return getLegEncodersData(__p_side, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getLegEncodersData(::jderobot::BodySide __p_side, const ::IceInternal::Function<void (const ::jderobot::LegEncodersDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLegEncodersData(__p_side, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLegEncodersData(::jderobot::BodySide __p_side, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLegEncodersData(__p_side, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getLegEncodersData(::jderobot::BodySide __p_side, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::jderobot::LegEncodersDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLegEncodersData(__p_side, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLegEncodersData(::jderobot::BodySide __p_side, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLegEncodersData(__p_side, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getLegEncodersData(::jderobot::BodySide __p_side, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::jderobot::LegEncodersDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getLegEncodersData(::jderobot::BodySide __p_side)
    {
        return begin_getLegEncodersData(__p_side, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLegEncodersData(::jderobot::BodySide __p_side, const ::Ice::Context& __ctx)
    {
        return begin_getLegEncodersData(__p_side, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLegEncodersData(::jderobot::BodySide __p_side, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLegEncodersData(__p_side, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLegEncodersData(::jderobot::BodySide __p_side, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLegEncodersData(__p_side, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLegEncodersData(::jderobot::BodySide __p_side, const ::jderobot::Callback_BodyEncoders_getLegEncodersDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLegEncodersData(__p_side, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLegEncodersData(::jderobot::BodySide __p_side, const ::Ice::Context& __ctx, const ::jderobot::Callback_BodyEncoders_getLegEncodersDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLegEncodersData(__p_side, &__ctx, __del, __cookie);
    }

    ::jderobot::LegEncodersDataPtr end_getLegEncodersData(const ::Ice::AsyncResultPtr&);
    
private:

    ::jderobot::LegEncodersDataPtr getLegEncodersData(::jderobot::BodySide, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getLegEncodersData(::jderobot::BodySide, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::jderobot::OdometryDataPtr getOdometryData(::jderobot::CameraBody __p_camera)
    {
        return getOdometryData(__p_camera, 0);
    }
    ::jderobot::OdometryDataPtr getOdometryData(::jderobot::CameraBody __p_camera, const ::Ice::Context& __ctx)
    {
        return getOdometryData(__p_camera, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getOdometryData(::jderobot::CameraBody __p_camera, const ::IceInternal::Function<void (const ::jderobot::OdometryDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOdometryData(__p_camera, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOdometryData(::jderobot::CameraBody __p_camera, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOdometryData(__p_camera, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getOdometryData(::jderobot::CameraBody __p_camera, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::jderobot::OdometryDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOdometryData(__p_camera, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOdometryData(::jderobot::CameraBody __p_camera, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOdometryData(__p_camera, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getOdometryData(::jderobot::CameraBody __p_camera, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::jderobot::OdometryDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getOdometryData(::jderobot::CameraBody __p_camera)
    {
        return begin_getOdometryData(__p_camera, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOdometryData(::jderobot::CameraBody __p_camera, const ::Ice::Context& __ctx)
    {
        return begin_getOdometryData(__p_camera, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOdometryData(::jderobot::CameraBody __p_camera, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOdometryData(__p_camera, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOdometryData(::jderobot::CameraBody __p_camera, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOdometryData(__p_camera, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOdometryData(::jderobot::CameraBody __p_camera, const ::jderobot::Callback_BodyEncoders_getOdometryDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOdometryData(__p_camera, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOdometryData(::jderobot::CameraBody __p_camera, const ::Ice::Context& __ctx, const ::jderobot::Callback_BodyEncoders_getOdometryDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOdometryData(__p_camera, &__ctx, __del, __cookie);
    }

    ::jderobot::OdometryDataPtr end_getOdometryData(const ::Ice::AsyncResultPtr&);
    
private:

    ::jderobot::OdometryDataPtr getOdometryData(::jderobot::CameraBody, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getOdometryData(::jderobot::CameraBody, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_secure(bool __secure) const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_twoway() const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_oneway() const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_batchOneway() const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_datagram() const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_batchDatagram() const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_compress(bool __compress) const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_timeout(int __timeout) const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<BodyEncoders> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<BodyEncoders*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace jderobot
{

class ArmEncodersData : virtual public ::Ice::Object
{
public:

    typedef ArmEncodersDataPrx ProxyType;
    typedef ArmEncodersDataPtr PointerType;

    ArmEncodersData()
    {
    }

    ArmEncodersData(const ::jderobot::BodyMotor& __ice_shoulder, const ::jderobot::BodyMotor& __ice_elbow, ::Ice::Int __ice_clock) :
        shoulder(__ice_shoulder),
        elbow(__ice_elbow),
        clock(__ice_clock)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static ::Ice::ObjectFactoryPtr ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;

public:

    ::jderobot::BodyMotor shoulder;

    ::jderobot::BodyMotor elbow;

    ::Ice::Int clock;
protected:

    virtual ~ArmEncodersData() {}

friend class ArmEncodersData__staticInit;
};
#if !defined(_MSC_VER) || (_MSC_VER < 1900)
//
// COMPILERFIX: Visual Studio 2015 update 1 fails to access
// the proected destructor from a friend class.
//

class ArmEncodersData__staticInit
{
public:

    ::jderobot::ArmEncodersData _init;
};

static ArmEncodersData__staticInit _ArmEncodersData_init;
#else
static auto _ArmEncodersData_init = ::jderobot::ArmEncodersData::ice_factory;
#endif

inline bool operator==(const ArmEncodersData& l, const ArmEncodersData& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ArmEncodersData& l, const ArmEncodersData& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class LegEncodersData : virtual public ::Ice::Object
{
public:

    typedef LegEncodersDataPrx ProxyType;
    typedef LegEncodersDataPtr PointerType;

    LegEncodersData()
    {
    }

    LegEncodersData(const ::jderobot::BodyMotor& __ice_hip, const ::jderobot::BodyMotor& __ice_knee, const ::jderobot::BodyMotor& __ice_ankle, ::Ice::Int __ice_clock) :
        hip(__ice_hip),
        knee(__ice_knee),
        ankle(__ice_ankle),
        clock(__ice_clock)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static ::Ice::ObjectFactoryPtr ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;

public:

    ::jderobot::BodyMotor hip;

    ::jderobot::BodyMotor knee;

    ::jderobot::BodyMotor ankle;

    ::Ice::Int clock;
protected:

    virtual ~LegEncodersData() {}
};

inline bool operator==(const LegEncodersData& l, const LegEncodersData& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const LegEncodersData& l, const LegEncodersData& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class OdometryData : virtual public ::Ice::Object
{
public:

    typedef OdometryDataPrx ProxyType;
    typedef OdometryDataPtr PointerType;

    OdometryData()
    {
    }

    explicit OdometryData(const ::jderobot::seqFloat& __ice_odometry) :
        odometry(__ice_odometry)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static ::Ice::ObjectFactoryPtr ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;

public:

    ::jderobot::seqFloat odometry;
protected:

    virtual ~OdometryData() {}
};

inline bool operator==(const OdometryData& l, const OdometryData& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const OdometryData& l, const OdometryData& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class BodyEncoders : virtual public ::Ice::Object
{
public:

    typedef BodyEncodersPrx ProxyType;
    typedef BodyEncodersPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::jderobot::ArmEncodersDataPtr getArmEncodersData(::jderobot::BodySide, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getArmEncodersData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::jderobot::LegEncodersDataPtr getLegEncodersData(::jderobot::BodySide, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getLegEncodersData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::jderobot::OdometryDataPtr getOdometryData(::jderobot::CameraBody, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getOdometryData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const BodyEncoders& l, const BodyEncoders& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const BodyEncoders& l, const BodyEncoders& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace jderobot
{

template<class T>
class CallbackNC_BodyEncoders_getArmEncodersData : public Callback_BodyEncoders_getArmEncodersData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::jderobot::ArmEncodersDataPtr&);

    CallbackNC_BodyEncoders_getArmEncodersData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::BodyEncodersPrx __proxy = ::jderobot::BodyEncodersPrx::uncheckedCast(__result->getProxy());
        ::jderobot::ArmEncodersDataPtr __ret;
        try
        {
            __ret = __proxy->end_getArmEncodersData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_BodyEncoders_getArmEncodersDataPtr
newCallback_BodyEncoders_getArmEncodersData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::ArmEncodersDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BodyEncoders_getArmEncodersData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BodyEncoders_getArmEncodersDataPtr
newCallback_BodyEncoders_getArmEncodersData(T* instance, void (T::*cb)(const ::jderobot::ArmEncodersDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BodyEncoders_getArmEncodersData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_BodyEncoders_getArmEncodersData : public Callback_BodyEncoders_getArmEncodersData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::jderobot::ArmEncodersDataPtr&, const CT&);

    Callback_BodyEncoders_getArmEncodersData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::BodyEncodersPrx __proxy = ::jderobot::BodyEncodersPrx::uncheckedCast(__result->getProxy());
        ::jderobot::ArmEncodersDataPtr __ret;
        try
        {
            __ret = __proxy->end_getArmEncodersData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_BodyEncoders_getArmEncodersDataPtr
newCallback_BodyEncoders_getArmEncodersData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::ArmEncodersDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BodyEncoders_getArmEncodersData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BodyEncoders_getArmEncodersDataPtr
newCallback_BodyEncoders_getArmEncodersData(T* instance, void (T::*cb)(const ::jderobot::ArmEncodersDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BodyEncoders_getArmEncodersData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_BodyEncoders_getLegEncodersData : public Callback_BodyEncoders_getLegEncodersData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::jderobot::LegEncodersDataPtr&);

    CallbackNC_BodyEncoders_getLegEncodersData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::BodyEncodersPrx __proxy = ::jderobot::BodyEncodersPrx::uncheckedCast(__result->getProxy());
        ::jderobot::LegEncodersDataPtr __ret;
        try
        {
            __ret = __proxy->end_getLegEncodersData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_BodyEncoders_getLegEncodersDataPtr
newCallback_BodyEncoders_getLegEncodersData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::LegEncodersDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BodyEncoders_getLegEncodersData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BodyEncoders_getLegEncodersDataPtr
newCallback_BodyEncoders_getLegEncodersData(T* instance, void (T::*cb)(const ::jderobot::LegEncodersDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BodyEncoders_getLegEncodersData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_BodyEncoders_getLegEncodersData : public Callback_BodyEncoders_getLegEncodersData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::jderobot::LegEncodersDataPtr&, const CT&);

    Callback_BodyEncoders_getLegEncodersData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::BodyEncodersPrx __proxy = ::jderobot::BodyEncodersPrx::uncheckedCast(__result->getProxy());
        ::jderobot::LegEncodersDataPtr __ret;
        try
        {
            __ret = __proxy->end_getLegEncodersData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_BodyEncoders_getLegEncodersDataPtr
newCallback_BodyEncoders_getLegEncodersData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::LegEncodersDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BodyEncoders_getLegEncodersData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BodyEncoders_getLegEncodersDataPtr
newCallback_BodyEncoders_getLegEncodersData(T* instance, void (T::*cb)(const ::jderobot::LegEncodersDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BodyEncoders_getLegEncodersData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_BodyEncoders_getOdometryData : public Callback_BodyEncoders_getOdometryData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::jderobot::OdometryDataPtr&);

    CallbackNC_BodyEncoders_getOdometryData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::BodyEncodersPrx __proxy = ::jderobot::BodyEncodersPrx::uncheckedCast(__result->getProxy());
        ::jderobot::OdometryDataPtr __ret;
        try
        {
            __ret = __proxy->end_getOdometryData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_BodyEncoders_getOdometryDataPtr
newCallback_BodyEncoders_getOdometryData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::OdometryDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BodyEncoders_getOdometryData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BodyEncoders_getOdometryDataPtr
newCallback_BodyEncoders_getOdometryData(T* instance, void (T::*cb)(const ::jderobot::OdometryDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BodyEncoders_getOdometryData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_BodyEncoders_getOdometryData : public Callback_BodyEncoders_getOdometryData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::jderobot::OdometryDataPtr&, const CT&);

    Callback_BodyEncoders_getOdometryData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::BodyEncodersPrx __proxy = ::jderobot::BodyEncodersPrx::uncheckedCast(__result->getProxy());
        ::jderobot::OdometryDataPtr __ret;
        try
        {
            __ret = __proxy->end_getOdometryData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_BodyEncoders_getOdometryDataPtr
newCallback_BodyEncoders_getOdometryData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::OdometryDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BodyEncoders_getOdometryData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BodyEncoders_getOdometryDataPtr
newCallback_BodyEncoders_getOdometryData(T* instance, void (T::*cb)(const ::jderobot::OdometryDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BodyEncoders_getOdometryData<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
