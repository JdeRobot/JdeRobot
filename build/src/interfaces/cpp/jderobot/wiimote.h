// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `wiimote.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot__home_fran_fqez_build_src_interfaces_cpp_jderobot_wiimote_h__
#define __jderobot__home_fran_fqez_build_src_interfaces_cpp_jderobot_wiimote_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <jderobot/common.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace jderobot
{

class AccelerometerData;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::AccelerometerData>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::AccelerometerData*);

class InfraredData;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::InfraredData>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::InfraredData*);

class NunchukData;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::NunchukData>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::NunchukData*);

class wiiMote;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::wiiMote>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::wiiMote*);

}

}

namespace jderobot
{

class AccelerometerData;
::Ice::Object* upCast(::jderobot::AccelerometerData*);
typedef ::IceInternal::Handle< ::jderobot::AccelerometerData> AccelerometerDataPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::AccelerometerData> AccelerometerDataPrx;
void __patch(AccelerometerDataPtr&, const ::Ice::ObjectPtr&);

class InfraredData;
::Ice::Object* upCast(::jderobot::InfraredData*);
typedef ::IceInternal::Handle< ::jderobot::InfraredData> InfraredDataPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::InfraredData> InfraredDataPrx;
void __patch(InfraredDataPtr&, const ::Ice::ObjectPtr&);

class NunchukData;
::Ice::Object* upCast(::jderobot::NunchukData*);
typedef ::IceInternal::Handle< ::jderobot::NunchukData> NunchukDataPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::NunchukData> NunchukDataPrx;
void __patch(NunchukDataPtr&, const ::Ice::ObjectPtr&);

class wiiMote;
::Ice::Object* upCast(::jderobot::wiiMote*);
typedef ::IceInternal::Handle< ::jderobot::wiiMote> wiiMotePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::wiiMote> wiiMotePrx;
void __patch(wiiMotePtr&, const ::Ice::ObjectPtr&);

}

namespace jderobot
{

class Callback_wiiMote_setValue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_wiiMote_setValue_Base> Callback_wiiMote_setValuePtr;

class Callback_wiiMote_changeRumbleMode_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_wiiMote_changeRumbleMode_Base> Callback_wiiMote_changeRumbleModePtr;

class Callback_wiiMote_changeIrMode_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_wiiMote_changeIrMode_Base> Callback_wiiMote_changeIrModePtr;

class Callback_wiiMote_changeAccMode_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_wiiMote_changeAccMode_Base> Callback_wiiMote_changeAccModePtr;

class Callback_wiiMote_changeButtonMode_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_wiiMote_changeButtonMode_Base> Callback_wiiMote_changeButtonModePtr;

class Callback_wiiMote_changeNunchukMode_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_wiiMote_changeNunchukMode_Base> Callback_wiiMote_changeNunchukModePtr;

class Callback_wiiMote_activateLed_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_wiiMote_activateLed_Base> Callback_wiiMote_activateLedPtr;

class Callback_wiiMote_getButtonData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_wiiMote_getButtonData_Base> Callback_wiiMote_getButtonDataPtr;

class Callback_wiiMote_getNunchukData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_wiiMote_getNunchukData_Base> Callback_wiiMote_getNunchukDataPtr;

class Callback_wiiMote_getAccData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_wiiMote_getAccData_Base> Callback_wiiMote_getAccDataPtr;

class Callback_wiiMote_getIrData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_wiiMote_getIrData_Base> Callback_wiiMote_getIrDataPtr;

class Callback_wiiMote_getBatteryStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_wiiMote_getBatteryStatus_Base> Callback_wiiMote_getBatteryStatusPtr;

}

namespace IceProxy
{

namespace jderobot
{

class AccelerometerData : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_secure(bool __secure) const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_twoway() const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_oneway() const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_batchOneway() const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_datagram() const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_batchDatagram() const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_compress(bool __compress) const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_timeout(int __timeout) const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<AccelerometerData> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<AccelerometerData*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class InfraredData : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<InfraredData> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<InfraredData> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<InfraredData> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<InfraredData> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InfraredData> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<InfraredData> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<InfraredData> ice_secure(bool __secure) const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<InfraredData> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<InfraredData> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<InfraredData> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<InfraredData> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<InfraredData> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InfraredData> ice_twoway() const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<InfraredData> ice_oneway() const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<InfraredData> ice_batchOneway() const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<InfraredData> ice_datagram() const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<InfraredData> ice_batchDatagram() const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<InfraredData> ice_compress(bool __compress) const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<InfraredData> ice_timeout(int __timeout) const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InfraredData> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<InfraredData> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<InfraredData*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class NunchukData : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<NunchukData> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<NunchukData> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<NunchukData> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<NunchukData> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NunchukData> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<NunchukData> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<NunchukData> ice_secure(bool __secure) const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<NunchukData> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<NunchukData> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<NunchukData> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<NunchukData> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<NunchukData> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NunchukData> ice_twoway() const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<NunchukData> ice_oneway() const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<NunchukData> ice_batchOneway() const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<NunchukData> ice_datagram() const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<NunchukData> ice_batchDatagram() const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<NunchukData> ice_compress(bool __compress) const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<NunchukData> ice_timeout(int __timeout) const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NunchukData> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<NunchukData> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<NunchukData*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class wiiMote : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int setValue(::Ice::Int __p_Value)
    {
        return setValue(__p_Value, 0);
    }
    ::Ice::Int setValue(::Ice::Int __p_Value, const ::Ice::Context& __ctx)
    {
        return setValue(__p_Value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setValue(::Ice::Int __p_Value, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setValue(__p_Value, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setValue(::Ice::Int __p_Value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setValue(__p_Value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setValue(::Ice::Int __p_Value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setValue(__p_Value, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setValue(::Ice::Int __p_Value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setValue(__p_Value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setValue(::Ice::Int __p_Value, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setValue(::Ice::Int __p_Value)
    {
        return begin_setValue(__p_Value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setValue(::Ice::Int __p_Value, const ::Ice::Context& __ctx)
    {
        return begin_setValue(__p_Value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setValue(::Ice::Int __p_Value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setValue(__p_Value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setValue(::Ice::Int __p_Value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setValue(__p_Value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setValue(::Ice::Int __p_Value, const ::jderobot::Callback_wiiMote_setValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setValue(__p_Value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setValue(::Ice::Int __p_Value, const ::Ice::Context& __ctx, const ::jderobot::Callback_wiiMote_setValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setValue(__p_Value, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_setValue(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int setValue(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setValue(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int changeRumbleMode()
    {
        return changeRumbleMode(0);
    }
    ::Ice::Int changeRumbleMode(const ::Ice::Context& __ctx)
    {
        return changeRumbleMode(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_changeRumbleMode(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeRumbleMode(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeRumbleMode(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeRumbleMode(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_changeRumbleMode(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeRumbleMode(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeRumbleMode(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeRumbleMode(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_changeRumbleMode(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_changeRumbleMode()
    {
        return begin_changeRumbleMode(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeRumbleMode(const ::Ice::Context& __ctx)
    {
        return begin_changeRumbleMode(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeRumbleMode(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeRumbleMode(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeRumbleMode(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeRumbleMode(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeRumbleMode(const ::jderobot::Callback_wiiMote_changeRumbleModePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeRumbleMode(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeRumbleMode(const ::Ice::Context& __ctx, const ::jderobot::Callback_wiiMote_changeRumbleModePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeRumbleMode(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_changeRumbleMode(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int changeRumbleMode(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_changeRumbleMode(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int changeIrMode()
    {
        return changeIrMode(0);
    }
    ::Ice::Int changeIrMode(const ::Ice::Context& __ctx)
    {
        return changeIrMode(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_changeIrMode(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeIrMode(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeIrMode(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeIrMode(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_changeIrMode(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeIrMode(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeIrMode(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeIrMode(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_changeIrMode(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_changeIrMode()
    {
        return begin_changeIrMode(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeIrMode(const ::Ice::Context& __ctx)
    {
        return begin_changeIrMode(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeIrMode(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeIrMode(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeIrMode(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeIrMode(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeIrMode(const ::jderobot::Callback_wiiMote_changeIrModePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeIrMode(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeIrMode(const ::Ice::Context& __ctx, const ::jderobot::Callback_wiiMote_changeIrModePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeIrMode(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_changeIrMode(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int changeIrMode(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_changeIrMode(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int changeAccMode()
    {
        return changeAccMode(0);
    }
    ::Ice::Int changeAccMode(const ::Ice::Context& __ctx)
    {
        return changeAccMode(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_changeAccMode(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeAccMode(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeAccMode(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeAccMode(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_changeAccMode(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeAccMode(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeAccMode(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeAccMode(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_changeAccMode(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_changeAccMode()
    {
        return begin_changeAccMode(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeAccMode(const ::Ice::Context& __ctx)
    {
        return begin_changeAccMode(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeAccMode(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeAccMode(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeAccMode(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeAccMode(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeAccMode(const ::jderobot::Callback_wiiMote_changeAccModePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeAccMode(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeAccMode(const ::Ice::Context& __ctx, const ::jderobot::Callback_wiiMote_changeAccModePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeAccMode(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_changeAccMode(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int changeAccMode(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_changeAccMode(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int changeButtonMode()
    {
        return changeButtonMode(0);
    }
    ::Ice::Int changeButtonMode(const ::Ice::Context& __ctx)
    {
        return changeButtonMode(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_changeButtonMode(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeButtonMode(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeButtonMode(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeButtonMode(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_changeButtonMode(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeButtonMode(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeButtonMode(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeButtonMode(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_changeButtonMode(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_changeButtonMode()
    {
        return begin_changeButtonMode(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeButtonMode(const ::Ice::Context& __ctx)
    {
        return begin_changeButtonMode(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeButtonMode(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeButtonMode(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeButtonMode(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeButtonMode(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeButtonMode(const ::jderobot::Callback_wiiMote_changeButtonModePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeButtonMode(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeButtonMode(const ::Ice::Context& __ctx, const ::jderobot::Callback_wiiMote_changeButtonModePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeButtonMode(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_changeButtonMode(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int changeButtonMode(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_changeButtonMode(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int changeNunchukMode()
    {
        return changeNunchukMode(0);
    }
    ::Ice::Int changeNunchukMode(const ::Ice::Context& __ctx)
    {
        return changeNunchukMode(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_changeNunchukMode(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeNunchukMode(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeNunchukMode(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeNunchukMode(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_changeNunchukMode(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_changeNunchukMode(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_changeNunchukMode(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_changeNunchukMode(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_changeNunchukMode(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_changeNunchukMode()
    {
        return begin_changeNunchukMode(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeNunchukMode(const ::Ice::Context& __ctx)
    {
        return begin_changeNunchukMode(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_changeNunchukMode(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeNunchukMode(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeNunchukMode(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeNunchukMode(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeNunchukMode(const ::jderobot::Callback_wiiMote_changeNunchukModePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeNunchukMode(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_changeNunchukMode(const ::Ice::Context& __ctx, const ::jderobot::Callback_wiiMote_changeNunchukModePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_changeNunchukMode(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_changeNunchukMode(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int changeNunchukMode(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_changeNunchukMode(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int activateLed(::Ice::Int __p_led)
    {
        return activateLed(__p_led, 0);
    }
    ::Ice::Int activateLed(::Ice::Int __p_led, const ::Ice::Context& __ctx)
    {
        return activateLed(__p_led, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_activateLed(::Ice::Int __p_led, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_activateLed(__p_led, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_activateLed(::Ice::Int __p_led, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_activateLed(__p_led, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_activateLed(::Ice::Int __p_led, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_activateLed(__p_led, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_activateLed(::Ice::Int __p_led, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_activateLed(__p_led, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_activateLed(::Ice::Int __p_led, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_activateLed(::Ice::Int __p_led)
    {
        return begin_activateLed(__p_led, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_activateLed(::Ice::Int __p_led, const ::Ice::Context& __ctx)
    {
        return begin_activateLed(__p_led, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_activateLed(::Ice::Int __p_led, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activateLed(__p_led, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activateLed(::Ice::Int __p_led, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activateLed(__p_led, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activateLed(::Ice::Int __p_led, const ::jderobot::Callback_wiiMote_activateLedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activateLed(__p_led, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activateLed(::Ice::Int __p_led, const ::Ice::Context& __ctx, const ::jderobot::Callback_wiiMote_activateLedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activateLed(__p_led, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_activateLed(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int activateLed(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_activateLed(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getButtonData()
    {
        return getButtonData(0);
    }
    ::Ice::Int getButtonData(const ::Ice::Context& __ctx)
    {
        return getButtonData(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getButtonData(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getButtonData(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getButtonData(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getButtonData(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getButtonData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getButtonData(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getButtonData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getButtonData(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getButtonData(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getButtonData()
    {
        return begin_getButtonData(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getButtonData(const ::Ice::Context& __ctx)
    {
        return begin_getButtonData(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getButtonData(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getButtonData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getButtonData(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getButtonData(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getButtonData(const ::jderobot::Callback_wiiMote_getButtonDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getButtonData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getButtonData(const ::Ice::Context& __ctx, const ::jderobot::Callback_wiiMote_getButtonDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getButtonData(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getButtonData(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getButtonData(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getButtonData(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::jderobot::NunchukDataPtr getNunchukData()
    {
        return getNunchukData(0);
    }
    ::jderobot::NunchukDataPtr getNunchukData(const ::Ice::Context& __ctx)
    {
        return getNunchukData(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getNunchukData(const ::IceInternal::Function<void (const ::jderobot::NunchukDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getNunchukData(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getNunchukData(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getNunchukData(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getNunchukData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::jderobot::NunchukDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getNunchukData(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getNunchukData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getNunchukData(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getNunchukData(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::jderobot::NunchukDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getNunchukData()
    {
        return begin_getNunchukData(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getNunchukData(const ::Ice::Context& __ctx)
    {
        return begin_getNunchukData(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getNunchukData(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNunchukData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getNunchukData(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNunchukData(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getNunchukData(const ::jderobot::Callback_wiiMote_getNunchukDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNunchukData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getNunchukData(const ::Ice::Context& __ctx, const ::jderobot::Callback_wiiMote_getNunchukDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNunchukData(&__ctx, __del, __cookie);
    }

    ::jderobot::NunchukDataPtr end_getNunchukData(const ::Ice::AsyncResultPtr&);
    
private:

    ::jderobot::NunchukDataPtr getNunchukData(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getNunchukData(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::jderobot::AccelerometerDataPtr getAccData()
    {
        return getAccData(0);
    }
    ::jderobot::AccelerometerDataPtr getAccData(const ::Ice::Context& __ctx)
    {
        return getAccData(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAccData(const ::IceInternal::Function<void (const ::jderobot::AccelerometerDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAccData(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAccData(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAccData(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAccData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::jderobot::AccelerometerDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAccData(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAccData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAccData(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAccData(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::jderobot::AccelerometerDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAccData()
    {
        return begin_getAccData(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAccData(const ::Ice::Context& __ctx)
    {
        return begin_getAccData(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAccData(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAccData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAccData(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAccData(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAccData(const ::jderobot::Callback_wiiMote_getAccDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAccData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAccData(const ::Ice::Context& __ctx, const ::jderobot::Callback_wiiMote_getAccDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAccData(&__ctx, __del, __cookie);
    }

    ::jderobot::AccelerometerDataPtr end_getAccData(const ::Ice::AsyncResultPtr&);
    
private:

    ::jderobot::AccelerometerDataPtr getAccData(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAccData(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::jderobot::InfraredDataPtr getIrData()
    {
        return getIrData(0);
    }
    ::jderobot::InfraredDataPtr getIrData(const ::Ice::Context& __ctx)
    {
        return getIrData(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getIrData(const ::IceInternal::Function<void (const ::jderobot::InfraredDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getIrData(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getIrData(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getIrData(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getIrData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::jderobot::InfraredDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getIrData(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getIrData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getIrData(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getIrData(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::jderobot::InfraredDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getIrData()
    {
        return begin_getIrData(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getIrData(const ::Ice::Context& __ctx)
    {
        return begin_getIrData(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getIrData(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getIrData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getIrData(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getIrData(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getIrData(const ::jderobot::Callback_wiiMote_getIrDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getIrData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getIrData(const ::Ice::Context& __ctx, const ::jderobot::Callback_wiiMote_getIrDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getIrData(&__ctx, __del, __cookie);
    }

    ::jderobot::InfraredDataPtr end_getIrData(const ::Ice::AsyncResultPtr&);
    
private:

    ::jderobot::InfraredDataPtr getIrData(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getIrData(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getBatteryStatus()
    {
        return getBatteryStatus(0);
    }
    ::Ice::Int getBatteryStatus(const ::Ice::Context& __ctx)
    {
        return getBatteryStatus(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getBatteryStatus(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBatteryStatus(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBatteryStatus(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBatteryStatus(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getBatteryStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBatteryStatus(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBatteryStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBatteryStatus(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getBatteryStatus(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getBatteryStatus()
    {
        return begin_getBatteryStatus(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBatteryStatus(const ::Ice::Context& __ctx)
    {
        return begin_getBatteryStatus(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBatteryStatus(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBatteryStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBatteryStatus(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBatteryStatus(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBatteryStatus(const ::jderobot::Callback_wiiMote_getBatteryStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBatteryStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBatteryStatus(const ::Ice::Context& __ctx, const ::jderobot::Callback_wiiMote_getBatteryStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBatteryStatus(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getBatteryStatus(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getBatteryStatus(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBatteryStatus(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<wiiMote> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<wiiMote> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<wiiMote> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<wiiMote> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<wiiMote> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<wiiMote> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<wiiMote> ice_secure(bool __secure) const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<wiiMote> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<wiiMote> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<wiiMote> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<wiiMote> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<wiiMote> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<wiiMote> ice_twoway() const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<wiiMote> ice_oneway() const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<wiiMote> ice_batchOneway() const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<wiiMote> ice_datagram() const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<wiiMote> ice_batchDatagram() const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<wiiMote> ice_compress(bool __compress) const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<wiiMote> ice_timeout(int __timeout) const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<wiiMote> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<wiiMote> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<wiiMote*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace jderobot
{

class AccelerometerData : virtual public ::Ice::Object
{
public:

    typedef AccelerometerDataPrx ProxyType;
    typedef AccelerometerDataPtr PointerType;

    AccelerometerData()
    {
    }

    explicit AccelerometerData(const ::jderobot::IntSeq& __ice_accelerometer) :
        accelerometer(__ice_accelerometer)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static ::Ice::ObjectFactoryPtr ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;

public:

    ::jderobot::IntSeq accelerometer;
protected:

    virtual ~AccelerometerData() {}

friend class AccelerometerData__staticInit;
};
#if !defined(_MSC_VER) || (_MSC_VER < 1900)
//
// COMPILERFIX: Visual Studio 2015 update 1 fails to access
// the proected destructor from a friend class.
//

class AccelerometerData__staticInit
{
public:

    ::jderobot::AccelerometerData _init;
};

static AccelerometerData__staticInit _AccelerometerData_init;
#else
static auto _AccelerometerData_init = ::jderobot::AccelerometerData::ice_factory;
#endif

inline bool operator==(const AccelerometerData& l, const AccelerometerData& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const AccelerometerData& l, const AccelerometerData& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class InfraredData : virtual public ::Ice::Object
{
public:

    typedef InfraredDataPrx ProxyType;
    typedef InfraredDataPtr PointerType;

    InfraredData()
    {
    }

    InfraredData(const ::jderobot::IntSeq& __ice_infrared1, const ::jderobot::IntSeq& __ice_infrared2, const ::jderobot::IntSeq& __ice_infrared3, const ::jderobot::IntSeq& __ice_infrared4, ::Ice::Int __ice_sourceDetected) :
        infrared1(__ice_infrared1),
        infrared2(__ice_infrared2),
        infrared3(__ice_infrared3),
        infrared4(__ice_infrared4),
        sourceDetected(__ice_sourceDetected)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static ::Ice::ObjectFactoryPtr ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;

public:

    ::jderobot::IntSeq infrared1;

    ::jderobot::IntSeq infrared2;

    ::jderobot::IntSeq infrared3;

    ::jderobot::IntSeq infrared4;

    ::Ice::Int sourceDetected;
protected:

    virtual ~InfraredData() {}
};

inline bool operator==(const InfraredData& l, const InfraredData& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const InfraredData& l, const InfraredData& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class NunchukData : virtual public ::Ice::Object
{
public:

    typedef NunchukDataPrx ProxyType;
    typedef NunchukDataPtr PointerType;

    NunchukData()
    {
    }

    NunchukData(::Ice::Int __ice_button, const ::jderobot::IntSeq& __ice_stick, const ::jderobot::IntSeq& __ice_acc) :
        button(__ice_button),
        stick(__ice_stick),
        acc(__ice_acc)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static ::Ice::ObjectFactoryPtr ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;

public:

    ::Ice::Int button;

    ::jderobot::IntSeq stick;

    ::jderobot::IntSeq acc;
protected:

    virtual ~NunchukData() {}
};

inline bool operator==(const NunchukData& l, const NunchukData& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const NunchukData& l, const NunchukData& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class wiiMote : virtual public ::Ice::Object
{
public:

    typedef wiiMotePrx ProxyType;
    typedef wiiMotePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int setValue(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setValue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int changeRumbleMode(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___changeRumbleMode(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int changeIrMode(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___changeIrMode(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int changeAccMode(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___changeAccMode(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int changeButtonMode(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___changeButtonMode(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int changeNunchukMode(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___changeNunchukMode(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int activateLed(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___activateLed(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getButtonData(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getButtonData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::jderobot::NunchukDataPtr getNunchukData(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getNunchukData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::jderobot::AccelerometerDataPtr getAccData(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getAccData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::jderobot::InfraredDataPtr getIrData(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getIrData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getBatteryStatus(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBatteryStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const wiiMote& l, const wiiMote& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const wiiMote& l, const wiiMote& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace jderobot
{

template<class T>
class CallbackNC_wiiMote_setValue : public Callback_wiiMote_setValue_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_wiiMote_setValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setValue(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_wiiMote_setValuePtr
newCallback_wiiMote_setValue(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_setValue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_wiiMote_setValuePtr
newCallback_wiiMote_setValue(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_setValue<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_wiiMote_setValue : public Callback_wiiMote_setValue_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_wiiMote_setValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setValue(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_wiiMote_setValuePtr
newCallback_wiiMote_setValue(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_setValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_wiiMote_setValuePtr
newCallback_wiiMote_setValue(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_setValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_wiiMote_changeRumbleMode : public Callback_wiiMote_changeRumbleMode_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_wiiMote_changeRumbleMode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_changeRumbleMode(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_wiiMote_changeRumbleModePtr
newCallback_wiiMote_changeRumbleMode(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_changeRumbleMode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_wiiMote_changeRumbleModePtr
newCallback_wiiMote_changeRumbleMode(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_changeRumbleMode<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_wiiMote_changeRumbleMode : public Callback_wiiMote_changeRumbleMode_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_wiiMote_changeRumbleMode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_changeRumbleMode(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_wiiMote_changeRumbleModePtr
newCallback_wiiMote_changeRumbleMode(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_changeRumbleMode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_wiiMote_changeRumbleModePtr
newCallback_wiiMote_changeRumbleMode(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_changeRumbleMode<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_wiiMote_changeIrMode : public Callback_wiiMote_changeIrMode_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_wiiMote_changeIrMode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_changeIrMode(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_wiiMote_changeIrModePtr
newCallback_wiiMote_changeIrMode(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_changeIrMode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_wiiMote_changeIrModePtr
newCallback_wiiMote_changeIrMode(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_changeIrMode<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_wiiMote_changeIrMode : public Callback_wiiMote_changeIrMode_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_wiiMote_changeIrMode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_changeIrMode(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_wiiMote_changeIrModePtr
newCallback_wiiMote_changeIrMode(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_changeIrMode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_wiiMote_changeIrModePtr
newCallback_wiiMote_changeIrMode(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_changeIrMode<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_wiiMote_changeAccMode : public Callback_wiiMote_changeAccMode_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_wiiMote_changeAccMode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_changeAccMode(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_wiiMote_changeAccModePtr
newCallback_wiiMote_changeAccMode(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_changeAccMode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_wiiMote_changeAccModePtr
newCallback_wiiMote_changeAccMode(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_changeAccMode<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_wiiMote_changeAccMode : public Callback_wiiMote_changeAccMode_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_wiiMote_changeAccMode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_changeAccMode(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_wiiMote_changeAccModePtr
newCallback_wiiMote_changeAccMode(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_changeAccMode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_wiiMote_changeAccModePtr
newCallback_wiiMote_changeAccMode(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_changeAccMode<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_wiiMote_changeButtonMode : public Callback_wiiMote_changeButtonMode_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_wiiMote_changeButtonMode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_changeButtonMode(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_wiiMote_changeButtonModePtr
newCallback_wiiMote_changeButtonMode(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_changeButtonMode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_wiiMote_changeButtonModePtr
newCallback_wiiMote_changeButtonMode(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_changeButtonMode<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_wiiMote_changeButtonMode : public Callback_wiiMote_changeButtonMode_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_wiiMote_changeButtonMode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_changeButtonMode(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_wiiMote_changeButtonModePtr
newCallback_wiiMote_changeButtonMode(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_changeButtonMode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_wiiMote_changeButtonModePtr
newCallback_wiiMote_changeButtonMode(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_changeButtonMode<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_wiiMote_changeNunchukMode : public Callback_wiiMote_changeNunchukMode_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_wiiMote_changeNunchukMode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_changeNunchukMode(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_wiiMote_changeNunchukModePtr
newCallback_wiiMote_changeNunchukMode(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_changeNunchukMode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_wiiMote_changeNunchukModePtr
newCallback_wiiMote_changeNunchukMode(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_changeNunchukMode<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_wiiMote_changeNunchukMode : public Callback_wiiMote_changeNunchukMode_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_wiiMote_changeNunchukMode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_changeNunchukMode(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_wiiMote_changeNunchukModePtr
newCallback_wiiMote_changeNunchukMode(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_changeNunchukMode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_wiiMote_changeNunchukModePtr
newCallback_wiiMote_changeNunchukMode(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_changeNunchukMode<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_wiiMote_activateLed : public Callback_wiiMote_activateLed_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_wiiMote_activateLed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_activateLed(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_wiiMote_activateLedPtr
newCallback_wiiMote_activateLed(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_activateLed<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_wiiMote_activateLedPtr
newCallback_wiiMote_activateLed(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_activateLed<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_wiiMote_activateLed : public Callback_wiiMote_activateLed_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_wiiMote_activateLed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_activateLed(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_wiiMote_activateLedPtr
newCallback_wiiMote_activateLed(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_activateLed<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_wiiMote_activateLedPtr
newCallback_wiiMote_activateLed(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_activateLed<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_wiiMote_getButtonData : public Callback_wiiMote_getButtonData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_wiiMote_getButtonData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getButtonData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_wiiMote_getButtonDataPtr
newCallback_wiiMote_getButtonData(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_getButtonData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_wiiMote_getButtonDataPtr
newCallback_wiiMote_getButtonData(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_getButtonData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_wiiMote_getButtonData : public Callback_wiiMote_getButtonData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_wiiMote_getButtonData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getButtonData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_wiiMote_getButtonDataPtr
newCallback_wiiMote_getButtonData(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_getButtonData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_wiiMote_getButtonDataPtr
newCallback_wiiMote_getButtonData(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_getButtonData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_wiiMote_getNunchukData : public Callback_wiiMote_getNunchukData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::jderobot::NunchukDataPtr&);

    CallbackNC_wiiMote_getNunchukData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::jderobot::NunchukDataPtr __ret;
        try
        {
            __ret = __proxy->end_getNunchukData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_wiiMote_getNunchukDataPtr
newCallback_wiiMote_getNunchukData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::NunchukDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_getNunchukData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_wiiMote_getNunchukDataPtr
newCallback_wiiMote_getNunchukData(T* instance, void (T::*cb)(const ::jderobot::NunchukDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_getNunchukData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_wiiMote_getNunchukData : public Callback_wiiMote_getNunchukData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::jderobot::NunchukDataPtr&, const CT&);

    Callback_wiiMote_getNunchukData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::jderobot::NunchukDataPtr __ret;
        try
        {
            __ret = __proxy->end_getNunchukData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_wiiMote_getNunchukDataPtr
newCallback_wiiMote_getNunchukData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::NunchukDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_getNunchukData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_wiiMote_getNunchukDataPtr
newCallback_wiiMote_getNunchukData(T* instance, void (T::*cb)(const ::jderobot::NunchukDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_getNunchukData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_wiiMote_getAccData : public Callback_wiiMote_getAccData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::jderobot::AccelerometerDataPtr&);

    CallbackNC_wiiMote_getAccData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::jderobot::AccelerometerDataPtr __ret;
        try
        {
            __ret = __proxy->end_getAccData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_wiiMote_getAccDataPtr
newCallback_wiiMote_getAccData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::AccelerometerDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_getAccData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_wiiMote_getAccDataPtr
newCallback_wiiMote_getAccData(T* instance, void (T::*cb)(const ::jderobot::AccelerometerDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_getAccData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_wiiMote_getAccData : public Callback_wiiMote_getAccData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::jderobot::AccelerometerDataPtr&, const CT&);

    Callback_wiiMote_getAccData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::jderobot::AccelerometerDataPtr __ret;
        try
        {
            __ret = __proxy->end_getAccData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_wiiMote_getAccDataPtr
newCallback_wiiMote_getAccData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::AccelerometerDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_getAccData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_wiiMote_getAccDataPtr
newCallback_wiiMote_getAccData(T* instance, void (T::*cb)(const ::jderobot::AccelerometerDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_getAccData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_wiiMote_getIrData : public Callback_wiiMote_getIrData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::jderobot::InfraredDataPtr&);

    CallbackNC_wiiMote_getIrData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::jderobot::InfraredDataPtr __ret;
        try
        {
            __ret = __proxy->end_getIrData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_wiiMote_getIrDataPtr
newCallback_wiiMote_getIrData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::InfraredDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_getIrData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_wiiMote_getIrDataPtr
newCallback_wiiMote_getIrData(T* instance, void (T::*cb)(const ::jderobot::InfraredDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_getIrData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_wiiMote_getIrData : public Callback_wiiMote_getIrData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::jderobot::InfraredDataPtr&, const CT&);

    Callback_wiiMote_getIrData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::jderobot::InfraredDataPtr __ret;
        try
        {
            __ret = __proxy->end_getIrData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_wiiMote_getIrDataPtr
newCallback_wiiMote_getIrData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::InfraredDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_getIrData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_wiiMote_getIrDataPtr
newCallback_wiiMote_getIrData(T* instance, void (T::*cb)(const ::jderobot::InfraredDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_getIrData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_wiiMote_getBatteryStatus : public Callback_wiiMote_getBatteryStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_wiiMote_getBatteryStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getBatteryStatus(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_wiiMote_getBatteryStatusPtr
newCallback_wiiMote_getBatteryStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_getBatteryStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_wiiMote_getBatteryStatusPtr
newCallback_wiiMote_getBatteryStatus(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_wiiMote_getBatteryStatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_wiiMote_getBatteryStatus : public Callback_wiiMote_getBatteryStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_wiiMote_getBatteryStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::wiiMotePrx __proxy = ::jderobot::wiiMotePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getBatteryStatus(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_wiiMote_getBatteryStatusPtr
newCallback_wiiMote_getBatteryStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_getBatteryStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_wiiMote_getBatteryStatusPtr
newCallback_wiiMote_getBatteryStatus(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_wiiMote_getBatteryStatus<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
