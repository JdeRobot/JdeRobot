// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `pose3dencoders.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <jderobot/pose3dencoders.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __jderobot__Pose3DEncoders__getPose3DEncodersData_name = "getPose3DEncodersData";

}
::IceProxy::Ice::Object* ::IceProxy::jderobot::upCast(::IceProxy::jderobot::Pose3DEncodersData* p) { return p; }

void
::IceProxy::jderobot::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::Pose3DEncodersData>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::jderobot::Pose3DEncodersData;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::jderobot::Pose3DEncodersData::ice_staticId()
{
    return ::jderobot::Pose3DEncodersData::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::jderobot::Pose3DEncodersData::__newInstance() const
{
    return new Pose3DEncodersData;
}
::IceProxy::Ice::Object* ::IceProxy::jderobot::upCast(::IceProxy::jderobot::Pose3DEncoders* p) { return p; }

void
::IceProxy::jderobot::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::Pose3DEncoders>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::jderobot::Pose3DEncoders;
        v->__copyFrom(proxy);
    }
}

::jderobot::Pose3DEncodersDataPtr
IceProxy::jderobot::Pose3DEncoders::getPose3DEncodersData(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__jderobot__Pose3DEncoders__getPose3DEncodersData_name);
    ::IceInternal::Outgoing __og(this, __jderobot__Pose3DEncoders__getPose3DEncodersData_name, ::Ice::Idempotent, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::jderobot::Pose3DEncodersDataPtr __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __is->readPendingObjects();
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::jderobot::Pose3DEncoders::begin_getPose3DEncodersData(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__jderobot__Pose3DEncoders__getPose3DEncodersData_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __jderobot__Pose3DEncoders__getPose3DEncodersData_name, __del, __cookie);
    try
    {
        __result->prepare(__jderobot__Pose3DEncoders__getPose3DEncodersData_name, ::Ice::Idempotent, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::jderobot::Pose3DEncoders::__begin_getPose3DEncodersData(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::jderobot::Pose3DEncodersDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::jderobot::Pose3DEncodersDataPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::jderobot::Pose3DEncodersPrx __proxy = ::jderobot::Pose3DEncodersPrx::uncheckedCast(__result->getProxy());
            ::jderobot::Pose3DEncodersDataPtr __ret;
            try
            {
                __ret = __proxy->end_getPose3DEncodersData(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::jderobot::Pose3DEncodersDataPtr&)> _response;
    };
    return begin_getPose3DEncodersData(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::jderobot::Pose3DEncodersDataPtr
IceProxy::jderobot::Pose3DEncoders::end_getPose3DEncodersData(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __jderobot__Pose3DEncoders__getPose3DEncodersData_name);
    ::jderobot::Pose3DEncodersDataPtr __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __is->readPendingObjects();
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::jderobot::Pose3DEncoders::ice_staticId()
{
    return ::jderobot::Pose3DEncoders::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::jderobot::Pose3DEncoders::__newInstance() const
{
    return new Pose3DEncoders;
}

::Ice::Object* jderobot::upCast(::jderobot::Pose3DEncodersData* p) { return p; }
::Ice::ObjectPtr
jderobot::Pose3DEncodersData::ice_clone() const
{
    ::Ice::Object* __p = new Pose3DEncodersData(*this);
    return __p;
}

namespace
{
const ::std::string __jderobot__Pose3DEncodersData_ids[2] =
{
    "::Ice::Object",
    "::jderobot::Pose3DEncodersData"
};

}

bool
jderobot::Pose3DEncodersData::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__jderobot__Pose3DEncodersData_ids, __jderobot__Pose3DEncodersData_ids + 2, _s);
}

::std::vector< ::std::string>
jderobot::Pose3DEncodersData::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__jderobot__Pose3DEncodersData_ids[0], &__jderobot__Pose3DEncodersData_ids[2]);
}

const ::std::string&
jderobot::Pose3DEncodersData::ice_id(const ::Ice::Current&) const
{
    return __jderobot__Pose3DEncodersData_ids[1];
}

const ::std::string&
jderobot::Pose3DEncodersData::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::jderobot::Pose3DEncodersData";
    return typeId;
#else
    return __jderobot__Pose3DEncodersData_ids[1];
#endif
}

void
jderobot::Pose3DEncodersData::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(x);
    __os->write(y);
    __os->write(z);
    __os->write(pan);
    __os->write(tilt);
    __os->write(roll);
    __os->write(clock);
    __os->write(maxPan);
    __os->write(maxTilt);
    __os->write(minPan);
    __os->write(minTilt);
    __os->endWriteSlice();
}

void
jderobot::Pose3DEncodersData::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(x);
    __is->read(y);
    __is->read(z);
    __is->read(pan);
    __is->read(tilt);
    __is->read(roll);
    __is->read(clock);
    __is->read(maxPan);
    __is->read(maxTilt);
    __is->read(minPan);
    __is->read(minTilt);
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultObjectFactoryInit< ::jderobot::Pose3DEncodersData> __jderobot__Pose3DEncodersData_init("::jderobot::Pose3DEncodersData");
}

::Ice::ObjectFactoryPtr
jderobot::Pose3DEncodersData::ice_factory()
{
    return ::IceInternal::factoryTable->getObjectFactory(::jderobot::Pose3DEncodersData::ice_staticId());
}

void 
jderobot::__patch(Pose3DEncodersDataPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::jderobot::Pose3DEncodersDataPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::jderobot::Pose3DEncodersData::ice_staticId(), v);
    }
}

::Ice::Object* jderobot::upCast(::jderobot::Pose3DEncoders* p) { return p; }

namespace
{
const ::std::string __jderobot__Pose3DEncoders_ids[2] =
{
    "::Ice::Object",
    "::jderobot::Pose3DEncoders"
};

}

bool
jderobot::Pose3DEncoders::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__jderobot__Pose3DEncoders_ids, __jderobot__Pose3DEncoders_ids + 2, _s);
}

::std::vector< ::std::string>
jderobot::Pose3DEncoders::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__jderobot__Pose3DEncoders_ids[0], &__jderobot__Pose3DEncoders_ids[2]);
}

const ::std::string&
jderobot::Pose3DEncoders::ice_id(const ::Ice::Current&) const
{
    return __jderobot__Pose3DEncoders_ids[1];
}

const ::std::string&
jderobot::Pose3DEncoders::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::jderobot::Pose3DEncoders";
    return typeId;
#else
    return __jderobot__Pose3DEncoders_ids[1];
#endif
}

::Ice::DispatchStatus
jderobot::Pose3DEncoders::___getPose3DEncodersData(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::jderobot::Pose3DEncodersDataPtr __ret = getPose3DEncodersData(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __os->writePendingObjects();
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __jderobot__Pose3DEncoders_all[] =
{
    "getPose3DEncodersData",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
jderobot::Pose3DEncoders::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__jderobot__Pose3DEncoders_all, __jderobot__Pose3DEncoders_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __jderobot__Pose3DEncoders_all)
    {
        case 0:
        {
            return ___getPose3DEncodersData(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
jderobot::Pose3DEncoders::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
jderobot::Pose3DEncoders::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
jderobot::__patch(Pose3DEncodersPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::jderobot::Pose3DEncodersPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::jderobot::Pose3DEncoders::ice_staticId(), v);
    }
}
