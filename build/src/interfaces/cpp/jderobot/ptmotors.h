// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `ptmotors.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot__home_fran_fqez_build_src_interfaces_cpp_jderobot_ptmotors_h__
#define __jderobot__home_fran_fqez_build_src_interfaces_cpp_jderobot_ptmotors_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <jderobot/common.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace jderobot
{

class PTMotorsData;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::PTMotorsData>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::PTMotorsData*);

class PTMotorsParams;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::PTMotorsParams>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::PTMotorsParams*);

class PTMotors;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::PTMotors>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::PTMotors*);

}

}

namespace jderobot
{

class PTMotorsData;
::Ice::Object* upCast(::jderobot::PTMotorsData*);
typedef ::IceInternal::Handle< ::jderobot::PTMotorsData> PTMotorsDataPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::PTMotorsData> PTMotorsDataPrx;
void __patch(PTMotorsDataPtr&, const ::Ice::ObjectPtr&);

class PTMotorsParams;
::Ice::Object* upCast(::jderobot::PTMotorsParams*);
typedef ::IceInternal::Handle< ::jderobot::PTMotorsParams> PTMotorsParamsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::PTMotorsParams> PTMotorsParamsPrx;
void __patch(PTMotorsParamsPtr&, const ::Ice::ObjectPtr&);

class PTMotors;
::Ice::Object* upCast(::jderobot::PTMotors*);
typedef ::IceInternal::Handle< ::jderobot::PTMotors> PTMotorsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::PTMotors> PTMotorsPrx;
void __patch(PTMotorsPtr&, const ::Ice::ObjectPtr&);

}

namespace jderobot
{

class Callback_PTMotors_setPTMotorsData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PTMotors_setPTMotorsData_Base> Callback_PTMotors_setPTMotorsDataPtr;

class Callback_PTMotors_getPTMotorsData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PTMotors_getPTMotorsData_Base> Callback_PTMotors_getPTMotorsDataPtr;

class Callback_PTMotors_getPTMotorsParams_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PTMotors_getPTMotorsParams_Base> Callback_PTMotors_getPTMotorsParamsPtr;

}

namespace IceProxy
{

namespace jderobot
{

class PTMotorsData : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_secure(bool __secure) const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_twoway() const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_oneway() const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_batchOneway() const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_datagram() const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_batchDatagram() const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_compress(bool __compress) const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsData> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PTMotorsData*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PTMotorsParams : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_secure(bool __secure) const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_twoway() const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_oneway() const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_batchOneway() const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_datagram() const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_batchDatagram() const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_compress(bool __compress) const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotorsParams> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PTMotorsParams*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PTMotors : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int setPTMotorsData(const ::jderobot::PTMotorsDataPtr& __p_data)
    {
        return setPTMotorsData(__p_data, 0);
    }
    ::Ice::Int setPTMotorsData(const ::jderobot::PTMotorsDataPtr& __p_data, const ::Ice::Context& __ctx)
    {
        return setPTMotorsData(__p_data, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPTMotorsData(const ::jderobot::PTMotorsDataPtr& __p_data, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPTMotorsData(__p_data, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPTMotorsData(const ::jderobot::PTMotorsDataPtr& __p_data, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPTMotorsData(__p_data, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPTMotorsData(const ::jderobot::PTMotorsDataPtr& __p_data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPTMotorsData(__p_data, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPTMotorsData(const ::jderobot::PTMotorsDataPtr& __p_data, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPTMotorsData(__p_data, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setPTMotorsData(const ::jderobot::PTMotorsDataPtr& __p_data, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setPTMotorsData(const ::jderobot::PTMotorsDataPtr& __p_data)
    {
        return begin_setPTMotorsData(__p_data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPTMotorsData(const ::jderobot::PTMotorsDataPtr& __p_data, const ::Ice::Context& __ctx)
    {
        return begin_setPTMotorsData(__p_data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPTMotorsData(const ::jderobot::PTMotorsDataPtr& __p_data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPTMotorsData(__p_data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPTMotorsData(const ::jderobot::PTMotorsDataPtr& __p_data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPTMotorsData(__p_data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPTMotorsData(const ::jderobot::PTMotorsDataPtr& __p_data, const ::jderobot::Callback_PTMotors_setPTMotorsDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPTMotorsData(__p_data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPTMotorsData(const ::jderobot::PTMotorsDataPtr& __p_data, const ::Ice::Context& __ctx, const ::jderobot::Callback_PTMotors_setPTMotorsDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPTMotorsData(__p_data, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_setPTMotorsData(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int setPTMotorsData(const ::jderobot::PTMotorsDataPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPTMotorsData(const ::jderobot::PTMotorsDataPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::jderobot::PTMotorsDataPtr getPTMotorsData()
    {
        return getPTMotorsData(0);
    }
    ::jderobot::PTMotorsDataPtr getPTMotorsData(const ::Ice::Context& __ctx)
    {
        return getPTMotorsData(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPTMotorsData(const ::IceInternal::Function<void (const ::jderobot::PTMotorsDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPTMotorsData(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPTMotorsData(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPTMotorsData(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPTMotorsData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::jderobot::PTMotorsDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPTMotorsData(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPTMotorsData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPTMotorsData(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPTMotorsData(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::jderobot::PTMotorsDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPTMotorsData()
    {
        return begin_getPTMotorsData(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPTMotorsData(const ::Ice::Context& __ctx)
    {
        return begin_getPTMotorsData(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPTMotorsData(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPTMotorsData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPTMotorsData(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPTMotorsData(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPTMotorsData(const ::jderobot::Callback_PTMotors_getPTMotorsDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPTMotorsData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPTMotorsData(const ::Ice::Context& __ctx, const ::jderobot::Callback_PTMotors_getPTMotorsDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPTMotorsData(&__ctx, __del, __cookie);
    }

    ::jderobot::PTMotorsDataPtr end_getPTMotorsData(const ::Ice::AsyncResultPtr&);
    
private:

    ::jderobot::PTMotorsDataPtr getPTMotorsData(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPTMotorsData(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::jderobot::PTMotorsParamsPtr getPTMotorsParams()
    {
        return getPTMotorsParams(0);
    }
    ::jderobot::PTMotorsParamsPtr getPTMotorsParams(const ::Ice::Context& __ctx)
    {
        return getPTMotorsParams(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPTMotorsParams(const ::IceInternal::Function<void (const ::jderobot::PTMotorsParamsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPTMotorsParams(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPTMotorsParams(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPTMotorsParams(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPTMotorsParams(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::jderobot::PTMotorsParamsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPTMotorsParams(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPTMotorsParams(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPTMotorsParams(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPTMotorsParams(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::jderobot::PTMotorsParamsPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPTMotorsParams()
    {
        return begin_getPTMotorsParams(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPTMotorsParams(const ::Ice::Context& __ctx)
    {
        return begin_getPTMotorsParams(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPTMotorsParams(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPTMotorsParams(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPTMotorsParams(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPTMotorsParams(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPTMotorsParams(const ::jderobot::Callback_PTMotors_getPTMotorsParamsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPTMotorsParams(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPTMotorsParams(const ::Ice::Context& __ctx, const ::jderobot::Callback_PTMotors_getPTMotorsParamsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPTMotorsParams(&__ctx, __del, __cookie);
    }

    ::jderobot::PTMotorsParamsPtr end_getPTMotorsParams(const ::Ice::AsyncResultPtr&);
    
private:

    ::jderobot::PTMotorsParamsPtr getPTMotorsParams(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPTMotorsParams(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<PTMotors> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotors> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotors> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotors> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotors> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotors> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotors> ice_secure(bool __secure) const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotors> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotors> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotors> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotors> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotors> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotors> ice_twoway() const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PTMotors> ice_oneway() const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PTMotors> ice_batchOneway() const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PTMotors> ice_datagram() const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PTMotors> ice_batchDatagram() const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PTMotors> ice_compress(bool __compress) const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotors> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotors> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PTMotors> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PTMotors*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace jderobot
{

class PTMotorsData : virtual public ::Ice::Object
{
public:

    typedef PTMotorsDataPrx ProxyType;
    typedef PTMotorsDataPtr PointerType;

    PTMotorsData()
    {
    }

    PTMotorsData(::Ice::Float __ice_latitude, ::Ice::Float __ice_latitudeSpeed, ::Ice::Float __ice_longitude, ::Ice::Float __ice_longitudeSpeed) :
        latitude(__ice_latitude),
        latitudeSpeed(__ice_latitudeSpeed),
        longitude(__ice_longitude),
        longitudeSpeed(__ice_longitudeSpeed)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static ::Ice::ObjectFactoryPtr ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;

public:

    ::Ice::Float latitude;

    ::Ice::Float latitudeSpeed;

    ::Ice::Float longitude;

    ::Ice::Float longitudeSpeed;
protected:

    virtual ~PTMotorsData() {}

friend class PTMotorsData__staticInit;
};
#if !defined(_MSC_VER) || (_MSC_VER < 1900)
//
// COMPILERFIX: Visual Studio 2015 update 1 fails to access
// the proected destructor from a friend class.
//

class PTMotorsData__staticInit
{
public:

    ::jderobot::PTMotorsData _init;
};

static PTMotorsData__staticInit _PTMotorsData_init;
#else
static auto _PTMotorsData_init = ::jderobot::PTMotorsData::ice_factory;
#endif

inline bool operator==(const PTMotorsData& l, const PTMotorsData& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PTMotorsData& l, const PTMotorsData& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PTMotorsParams : virtual public ::Ice::Object
{
public:

    typedef PTMotorsParamsPrx ProxyType;
    typedef PTMotorsParamsPtr PointerType;

    PTMotorsParams()
    {
    }

    PTMotorsParams(::Ice::Float __ice_maxLongitude, ::Ice::Float __ice_minLongitude, ::Ice::Float __ice_maxLatitude, ::Ice::Float __ice_minLatitude, ::Ice::Float __ice_maxLongitudeSpeed, ::Ice::Float __ice_maxLatitudeSpeed) :
        maxLongitude(__ice_maxLongitude),
        minLongitude(__ice_minLongitude),
        maxLatitude(__ice_maxLatitude),
        minLatitude(__ice_minLatitude),
        maxLongitudeSpeed(__ice_maxLongitudeSpeed),
        maxLatitudeSpeed(__ice_maxLatitudeSpeed)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static ::Ice::ObjectFactoryPtr ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;

public:

    ::Ice::Float maxLongitude;

    ::Ice::Float minLongitude;

    ::Ice::Float maxLatitude;

    ::Ice::Float minLatitude;

    ::Ice::Float maxLongitudeSpeed;

    ::Ice::Float maxLatitudeSpeed;
protected:

    virtual ~PTMotorsParams() {}
};

inline bool operator==(const PTMotorsParams& l, const PTMotorsParams& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PTMotorsParams& l, const PTMotorsParams& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PTMotors : virtual public ::Ice::Object
{
public:

    typedef PTMotorsPrx ProxyType;
    typedef PTMotorsPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int setPTMotorsData(const ::jderobot::PTMotorsDataPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPTMotorsData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::jderobot::PTMotorsDataPtr getPTMotorsData(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPTMotorsData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::jderobot::PTMotorsParamsPtr getPTMotorsParams(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPTMotorsParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const PTMotors& l, const PTMotors& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PTMotors& l, const PTMotors& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace jderobot
{

template<class T>
class CallbackNC_PTMotors_setPTMotorsData : public Callback_PTMotors_setPTMotorsData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_PTMotors_setPTMotorsData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::PTMotorsPrx __proxy = ::jderobot::PTMotorsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setPTMotorsData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_PTMotors_setPTMotorsDataPtr
newCallback_PTMotors_setPTMotorsData(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PTMotors_setPTMotorsData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PTMotors_setPTMotorsDataPtr
newCallback_PTMotors_setPTMotorsData(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PTMotors_setPTMotorsData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PTMotors_setPTMotorsData : public Callback_PTMotors_setPTMotorsData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_PTMotors_setPTMotorsData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::PTMotorsPrx __proxy = ::jderobot::PTMotorsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setPTMotorsData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_PTMotors_setPTMotorsDataPtr
newCallback_PTMotors_setPTMotorsData(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PTMotors_setPTMotorsData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PTMotors_setPTMotorsDataPtr
newCallback_PTMotors_setPTMotorsData(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PTMotors_setPTMotorsData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PTMotors_getPTMotorsData : public Callback_PTMotors_getPTMotorsData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::jderobot::PTMotorsDataPtr&);

    CallbackNC_PTMotors_getPTMotorsData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::PTMotorsPrx __proxy = ::jderobot::PTMotorsPrx::uncheckedCast(__result->getProxy());
        ::jderobot::PTMotorsDataPtr __ret;
        try
        {
            __ret = __proxy->end_getPTMotorsData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_PTMotors_getPTMotorsDataPtr
newCallback_PTMotors_getPTMotorsData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::PTMotorsDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PTMotors_getPTMotorsData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PTMotors_getPTMotorsDataPtr
newCallback_PTMotors_getPTMotorsData(T* instance, void (T::*cb)(const ::jderobot::PTMotorsDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PTMotors_getPTMotorsData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PTMotors_getPTMotorsData : public Callback_PTMotors_getPTMotorsData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::jderobot::PTMotorsDataPtr&, const CT&);

    Callback_PTMotors_getPTMotorsData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::PTMotorsPrx __proxy = ::jderobot::PTMotorsPrx::uncheckedCast(__result->getProxy());
        ::jderobot::PTMotorsDataPtr __ret;
        try
        {
            __ret = __proxy->end_getPTMotorsData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_PTMotors_getPTMotorsDataPtr
newCallback_PTMotors_getPTMotorsData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::PTMotorsDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PTMotors_getPTMotorsData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PTMotors_getPTMotorsDataPtr
newCallback_PTMotors_getPTMotorsData(T* instance, void (T::*cb)(const ::jderobot::PTMotorsDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PTMotors_getPTMotorsData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PTMotors_getPTMotorsParams : public Callback_PTMotors_getPTMotorsParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::jderobot::PTMotorsParamsPtr&);

    CallbackNC_PTMotors_getPTMotorsParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::PTMotorsPrx __proxy = ::jderobot::PTMotorsPrx::uncheckedCast(__result->getProxy());
        ::jderobot::PTMotorsParamsPtr __ret;
        try
        {
            __ret = __proxy->end_getPTMotorsParams(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_PTMotors_getPTMotorsParamsPtr
newCallback_PTMotors_getPTMotorsParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::PTMotorsParamsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PTMotors_getPTMotorsParams<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PTMotors_getPTMotorsParamsPtr
newCallback_PTMotors_getPTMotorsParams(T* instance, void (T::*cb)(const ::jderobot::PTMotorsParamsPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PTMotors_getPTMotorsParams<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PTMotors_getPTMotorsParams : public Callback_PTMotors_getPTMotorsParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::jderobot::PTMotorsParamsPtr&, const CT&);

    Callback_PTMotors_getPTMotorsParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::PTMotorsPrx __proxy = ::jderobot::PTMotorsPrx::uncheckedCast(__result->getProxy());
        ::jderobot::PTMotorsParamsPtr __ret;
        try
        {
            __ret = __proxy->end_getPTMotorsParams(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_PTMotors_getPTMotorsParamsPtr
newCallback_PTMotors_getPTMotorsParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::PTMotorsParamsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PTMotors_getPTMotorsParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PTMotors_getPTMotorsParamsPtr
newCallback_PTMotors_getPTMotorsParams(T* instance, void (T::*cb)(const ::jderobot::PTMotorsParamsPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PTMotors_getPTMotorsParams<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
