// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `ardroneextra.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <jderobot/ardroneextra.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __jderobot__ArDroneExtra__toggleCam_name = "toggleCam";

const ::std::string __jderobot__ArDroneExtra__land_name = "land";

const ::std::string __jderobot__ArDroneExtra__takeoff_name = "takeoff";

const ::std::string __jderobot__ArDroneExtra__reset_name = "reset";

const ::std::string __jderobot__ArDroneExtra__recordOnUsb_name = "recordOnUsb";

const ::std::string __jderobot__ArDroneExtra__ledAnimation_name = "ledAnimation";

const ::std::string __jderobot__ArDroneExtra__flightAnimation_name = "flightAnimation";

const ::std::string __jderobot__ArDroneExtra__flatTrim_name = "flatTrim";

}
::IceProxy::Ice::Object* ::IceProxy::jderobot::upCast(::IceProxy::jderobot::ArDroneExtra* p) { return p; }

void
::IceProxy::jderobot::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::ArDroneExtra>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::jderobot::ArDroneExtra;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::jderobot::ArDroneExtra::toggleCam(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __jderobot__ArDroneExtra__toggleCam_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::jderobot::ArDroneExtra::begin_toggleCam(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __jderobot__ArDroneExtra__toggleCam_name, __del, __cookie);
    try
    {
        __result->prepare(__jderobot__ArDroneExtra__toggleCam_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::jderobot::ArDroneExtra::end_toggleCam(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __jderobot__ArDroneExtra__toggleCam_name);
}

void
IceProxy::jderobot::ArDroneExtra::land(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __jderobot__ArDroneExtra__land_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::jderobot::ArDroneExtra::begin_land(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __jderobot__ArDroneExtra__land_name, __del, __cookie);
    try
    {
        __result->prepare(__jderobot__ArDroneExtra__land_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::jderobot::ArDroneExtra::end_land(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __jderobot__ArDroneExtra__land_name);
}

void
IceProxy::jderobot::ArDroneExtra::takeoff(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __jderobot__ArDroneExtra__takeoff_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::jderobot::ArDroneExtra::begin_takeoff(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __jderobot__ArDroneExtra__takeoff_name, __del, __cookie);
    try
    {
        __result->prepare(__jderobot__ArDroneExtra__takeoff_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::jderobot::ArDroneExtra::end_takeoff(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __jderobot__ArDroneExtra__takeoff_name);
}

void
IceProxy::jderobot::ArDroneExtra::reset(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __jderobot__ArDroneExtra__reset_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::jderobot::ArDroneExtra::begin_reset(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __jderobot__ArDroneExtra__reset_name, __del, __cookie);
    try
    {
        __result->prepare(__jderobot__ArDroneExtra__reset_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::jderobot::ArDroneExtra::end_reset(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __jderobot__ArDroneExtra__reset_name);
}

void
IceProxy::jderobot::ArDroneExtra::recordOnUsb(bool __p_record, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __jderobot__ArDroneExtra__recordOnUsb_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_record);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::jderobot::ArDroneExtra::begin_recordOnUsb(bool __p_record, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __jderobot__ArDroneExtra__recordOnUsb_name, __del, __cookie);
    try
    {
        __result->prepare(__jderobot__ArDroneExtra__recordOnUsb_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_record);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::jderobot::ArDroneExtra::end_recordOnUsb(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __jderobot__ArDroneExtra__recordOnUsb_name);
}

void
IceProxy::jderobot::ArDroneExtra::ledAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, ::Ice::Float __p_req, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __jderobot__ArDroneExtra__ledAnimation_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_type);
        __os->write(__p_duration);
        __os->write(__p_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::jderobot::ArDroneExtra::begin_ledAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, ::Ice::Float __p_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __jderobot__ArDroneExtra__ledAnimation_name, __del, __cookie);
    try
    {
        __result->prepare(__jderobot__ArDroneExtra__ledAnimation_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_type);
        __os->write(__p_duration);
        __os->write(__p_req);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::jderobot::ArDroneExtra::end_ledAnimation(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __jderobot__ArDroneExtra__ledAnimation_name);
}

void
IceProxy::jderobot::ArDroneExtra::flightAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __jderobot__ArDroneExtra__flightAnimation_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_type);
        __os->write(__p_duration);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::jderobot::ArDroneExtra::begin_flightAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __jderobot__ArDroneExtra__flightAnimation_name, __del, __cookie);
    try
    {
        __result->prepare(__jderobot__ArDroneExtra__flightAnimation_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_type);
        __os->write(__p_duration);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::jderobot::ArDroneExtra::end_flightAnimation(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __jderobot__ArDroneExtra__flightAnimation_name);
}

void
IceProxy::jderobot::ArDroneExtra::flatTrim(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __jderobot__ArDroneExtra__flatTrim_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::jderobot::ArDroneExtra::begin_flatTrim(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __jderobot__ArDroneExtra__flatTrim_name, __del, __cookie);
    try
    {
        __result->prepare(__jderobot__ArDroneExtra__flatTrim_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::jderobot::ArDroneExtra::end_flatTrim(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __jderobot__ArDroneExtra__flatTrim_name);
}

const ::std::string&
IceProxy::jderobot::ArDroneExtra::ice_staticId()
{
    return ::jderobot::ArDroneExtra::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::jderobot::ArDroneExtra::__newInstance() const
{
    return new ArDroneExtra;
}

::Ice::Object* jderobot::upCast(::jderobot::ArDroneExtra* p) { return p; }

namespace
{
const ::std::string __jderobot__ArDroneExtra_ids[2] =
{
    "::Ice::Object",
    "::jderobot::ArDroneExtra"
};

}

bool
jderobot::ArDroneExtra::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__jderobot__ArDroneExtra_ids, __jderobot__ArDroneExtra_ids + 2, _s);
}

::std::vector< ::std::string>
jderobot::ArDroneExtra::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__jderobot__ArDroneExtra_ids[0], &__jderobot__ArDroneExtra_ids[2]);
}

const ::std::string&
jderobot::ArDroneExtra::ice_id(const ::Ice::Current&) const
{
    return __jderobot__ArDroneExtra_ids[1];
}

const ::std::string&
jderobot::ArDroneExtra::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::jderobot::ArDroneExtra";
    return typeId;
#else
    return __jderobot__ArDroneExtra_ids[1];
#endif
}

::Ice::DispatchStatus
jderobot::ArDroneExtra::___toggleCam(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    toggleCam(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
jderobot::ArDroneExtra::___land(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    land(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
jderobot::ArDroneExtra::___takeoff(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    takeoff(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
jderobot::ArDroneExtra::___reset(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    reset(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
jderobot::ArDroneExtra::___recordOnUsb(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    bool __p_record;
    __is->read(__p_record);
    __inS.endReadParams();
    recordOnUsb(__p_record, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
jderobot::ArDroneExtra::___ledAnimation(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_type;
    ::Ice::Float __p_duration;
    ::Ice::Float __p_req;
    __is->read(__p_type);
    __is->read(__p_duration);
    __is->read(__p_req);
    __inS.endReadParams();
    ledAnimation(__p_type, __p_duration, __p_req, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
jderobot::ArDroneExtra::___flightAnimation(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_type;
    ::Ice::Float __p_duration;
    __is->read(__p_type);
    __is->read(__p_duration);
    __inS.endReadParams();
    flightAnimation(__p_type, __p_duration, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
jderobot::ArDroneExtra::___flatTrim(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    flatTrim(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __jderobot__ArDroneExtra_all[] =
{
    "flatTrim",
    "flightAnimation",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "land",
    "ledAnimation",
    "recordOnUsb",
    "reset",
    "takeoff",
    "toggleCam"
};

}

::Ice::DispatchStatus
jderobot::ArDroneExtra::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__jderobot__ArDroneExtra_all, __jderobot__ArDroneExtra_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __jderobot__ArDroneExtra_all)
    {
        case 0:
        {
            return ___flatTrim(in, current);
        }
        case 1:
        {
            return ___flightAnimation(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
        case 6:
        {
            return ___land(in, current);
        }
        case 7:
        {
            return ___ledAnimation(in, current);
        }
        case 8:
        {
            return ___recordOnUsb(in, current);
        }
        case 9:
        {
            return ___reset(in, current);
        }
        case 10:
        {
            return ___takeoff(in, current);
        }
        case 11:
        {
            return ___toggleCam(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
jderobot::ArDroneExtra::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
jderobot::ArDroneExtra::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
jderobot::__patch(ArDroneExtraPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::jderobot::ArDroneExtraPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::jderobot::ArDroneExtra::ice_staticId(), v);
    }
}
