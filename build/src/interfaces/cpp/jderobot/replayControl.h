// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `replayControl.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot__home_fran_fqez_build_src_interfaces_cpp_jderobot_replayControl_h__
#define __jderobot__home_fran_fqez_build_src_interfaces_cpp_jderobot_replayControl_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace jderobot
{

class replayControl;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::replayControl>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::replayControl*);

}

}

namespace jderobot
{

class replayControl;
::Ice::Object* upCast(::jderobot::replayControl*);
typedef ::IceInternal::Handle< ::jderobot::replayControl> replayControlPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::replayControl> replayControlPrx;
void __patch(replayControlPtr&, const ::Ice::ObjectPtr&);

}

namespace jderobot
{

enum ReplayerStatus
{
    WAITING,
    PLAYING,
    PAUSED,
    FINISHED
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::jderobot::ReplayerStatus>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

}

namespace jderobot
{

class Callback_replayControl_pause_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_replayControl_pause_Base> Callback_replayControl_pausePtr;

class Callback_replayControl_resume_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_replayControl_resume_Base> Callback_replayControl_resumePtr;

class Callback_replayControl_setReplay_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_replayControl_setReplay_Base> Callback_replayControl_setReplayPtr;

class Callback_replayControl_setStep_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_replayControl_setStep_Base> Callback_replayControl_setStepPtr;

class Callback_replayControl_getTime_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_replayControl_getTime_Base> Callback_replayControl_getTimePtr;

class Callback_replayControl_goTo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_replayControl_goTo_Base> Callback_replayControl_goToPtr;

class Callback_replayControl_getStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_replayControl_getStatus_Base> Callback_replayControl_getStatusPtr;

}

namespace IceProxy
{

namespace jderobot
{

class replayControl : virtual public ::IceProxy::Ice::Object
{
public:

    bool pause()
    {
        return pause(0);
    }
    bool pause(const ::Ice::Context& __ctx)
    {
        return pause(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_pause(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_pause(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_pause(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_pause(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_pause(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_pause(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_pause(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_pause(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_pause(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_pause()
    {
        return begin_pause(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_pause(const ::Ice::Context& __ctx)
    {
        return begin_pause(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_pause(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pause(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pause(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pause(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pause(const ::jderobot::Callback_replayControl_pausePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pause(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pause(const ::Ice::Context& __ctx, const ::jderobot::Callback_replayControl_pausePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_pause(&__ctx, __del, __cookie);
    }

    bool end_pause(const ::Ice::AsyncResultPtr&);
    
private:

    bool pause(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_pause(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool resume()
    {
        return resume(0);
    }
    bool resume(const ::Ice::Context& __ctx)
    {
        return resume(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_resume(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_resume(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_resume(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_resume(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_resume(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_resume(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_resume(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_resume(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_resume(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_resume()
    {
        return begin_resume(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resume(const ::Ice::Context& __ctx)
    {
        return begin_resume(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resume(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resume(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resume(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resume(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resume(const ::jderobot::Callback_replayControl_resumePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resume(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resume(const ::Ice::Context& __ctx, const ::jderobot::Callback_replayControl_resumePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resume(&__ctx, __del, __cookie);
    }

    bool end_resume(const ::Ice::AsyncResultPtr&);
    
private:

    bool resume(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_resume(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setReplay(bool __p_replay)
    {
        setReplay(__p_replay, 0);
    }
    void setReplay(bool __p_replay, const ::Ice::Context& __ctx)
    {
        setReplay(__p_replay, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setReplay(bool __p_replay, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setReplay(__p_replay, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setReplay(bool __p_replay, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setReplay(__p_replay, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setReplay(bool __p_replay, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setReplay(__p_replay, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setReplay(bool __p_replay, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setReplay(__p_replay, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setReplay(bool __p_replay)
    {
        return begin_setReplay(__p_replay, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setReplay(bool __p_replay, const ::Ice::Context& __ctx)
    {
        return begin_setReplay(__p_replay, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setReplay(bool __p_replay, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReplay(__p_replay, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReplay(bool __p_replay, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReplay(__p_replay, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReplay(bool __p_replay, const ::jderobot::Callback_replayControl_setReplayPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReplay(__p_replay, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReplay(bool __p_replay, const ::Ice::Context& __ctx, const ::jderobot::Callback_replayControl_setReplayPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReplay(__p_replay, &__ctx, __del, __cookie);
    }

    void end_setReplay(const ::Ice::AsyncResultPtr&);
    
private:

    void setReplay(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setReplay(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool setStep(::Ice::Int __p_step)
    {
        return setStep(__p_step, 0);
    }
    bool setStep(::Ice::Int __p_step, const ::Ice::Context& __ctx)
    {
        return setStep(__p_step, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setStep(::Ice::Int __p_step, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setStep(__p_step, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setStep(::Ice::Int __p_step, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setStep(__p_step, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setStep(::Ice::Int __p_step, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setStep(__p_step, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setStep(::Ice::Int __p_step, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setStep(__p_step, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setStep(::Ice::Int __p_step, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setStep(::Ice::Int __p_step)
    {
        return begin_setStep(__p_step, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStep(::Ice::Int __p_step, const ::Ice::Context& __ctx)
    {
        return begin_setStep(__p_step, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStep(::Ice::Int __p_step, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStep(__p_step, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStep(::Ice::Int __p_step, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStep(__p_step, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStep(::Ice::Int __p_step, const ::jderobot::Callback_replayControl_setStepPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStep(__p_step, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStep(::Ice::Int __p_step, const ::Ice::Context& __ctx, const ::jderobot::Callback_replayControl_setStepPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStep(__p_step, &__ctx, __del, __cookie);
    }

    bool end_setStep(const ::Ice::AsyncResultPtr&);
    
private:

    bool setStep(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setStep(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Long getTime()
    {
        return getTime(0);
    }
    ::Ice::Long getTime(const ::Ice::Context& __ctx)
    {
        return getTime(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getTime(const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTime(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTime(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTime(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getTime(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTime(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTime(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTime(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getTime(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getTime()
    {
        return begin_getTime(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTime(const ::Ice::Context& __ctx)
    {
        return begin_getTime(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTime(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTime(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTime(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTime(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTime(const ::jderobot::Callback_replayControl_getTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTime(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTime(const ::Ice::Context& __ctx, const ::jderobot::Callback_replayControl_getTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTime(&__ctx, __del, __cookie);
    }

    ::Ice::Long end_getTime(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long getTime(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTime(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool goTo(::Ice::Long __p_seek)
    {
        return goTo(__p_seek, 0);
    }
    bool goTo(::Ice::Long __p_seek, const ::Ice::Context& __ctx)
    {
        return goTo(__p_seek, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_goTo(::Ice::Long __p_seek, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_goTo(__p_seek, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_goTo(::Ice::Long __p_seek, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_goTo(__p_seek, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_goTo(::Ice::Long __p_seek, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_goTo(__p_seek, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_goTo(::Ice::Long __p_seek, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_goTo(__p_seek, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_goTo(::Ice::Long __p_seek, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_goTo(::Ice::Long __p_seek)
    {
        return begin_goTo(__p_seek, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_goTo(::Ice::Long __p_seek, const ::Ice::Context& __ctx)
    {
        return begin_goTo(__p_seek, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_goTo(::Ice::Long __p_seek, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goTo(__p_seek, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_goTo(::Ice::Long __p_seek, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goTo(__p_seek, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_goTo(::Ice::Long __p_seek, const ::jderobot::Callback_replayControl_goToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goTo(__p_seek, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_goTo(::Ice::Long __p_seek, const ::Ice::Context& __ctx, const ::jderobot::Callback_replayControl_goToPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_goTo(__p_seek, &__ctx, __del, __cookie);
    }

    bool end_goTo(const ::Ice::AsyncResultPtr&);
    
private:

    bool goTo(::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_goTo(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::jderobot::ReplayerStatus getStatus()
    {
        return getStatus(0);
    }
    ::jderobot::ReplayerStatus getStatus(const ::Ice::Context& __ctx)
    {
        return getStatus(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getStatus(const ::IceInternal::Function<void (::jderobot::ReplayerStatus)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStatus(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStatus(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStatus(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::jderobot::ReplayerStatus)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStatus(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStatus(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStatus(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getStatus(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::jderobot::ReplayerStatus)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getStatus()
    {
        return begin_getStatus(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx)
    {
        return begin_getStatus(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::jderobot::Callback_replayControl_getStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context& __ctx, const ::jderobot::Callback_replayControl_getStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatus(&__ctx, __del, __cookie);
    }

    ::jderobot::ReplayerStatus end_getStatus(const ::Ice::AsyncResultPtr&);
    
private:

    ::jderobot::ReplayerStatus getStatus(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getStatus(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<replayControl> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<replayControl> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<replayControl> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<replayControl> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<replayControl> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<replayControl> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<replayControl> ice_secure(bool __secure) const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<replayControl> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<replayControl> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<replayControl> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<replayControl> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<replayControl> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<replayControl> ice_twoway() const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<replayControl> ice_oneway() const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<replayControl> ice_batchOneway() const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<replayControl> ice_datagram() const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<replayControl> ice_batchDatagram() const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<replayControl> ice_compress(bool __compress) const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<replayControl> ice_timeout(int __timeout) const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<replayControl> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<replayControl> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<replayControl*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace jderobot
{

class replayControl : virtual public ::Ice::Object
{
public:

    typedef replayControlPrx ProxyType;
    typedef replayControlPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual bool pause(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___pause(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool resume(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___resume(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setReplay(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setReplay(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool setStep(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setStep(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Long getTime(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getTime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool goTo(::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___goTo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::jderobot::ReplayerStatus getStatus(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const replayControl& l, const replayControl& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const replayControl& l, const replayControl& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace jderobot
{

template<class T>
class CallbackNC_replayControl_pause : public Callback_replayControl_pause_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_replayControl_pause(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::replayControlPrx __proxy = ::jderobot::replayControlPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_pause(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_replayControl_pausePtr
newCallback_replayControl_pause(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_pause<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_replayControl_pausePtr
newCallback_replayControl_pause(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_pause<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_replayControl_pause : public Callback_replayControl_pause_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_replayControl_pause(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::replayControlPrx __proxy = ::jderobot::replayControlPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_pause(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_replayControl_pausePtr
newCallback_replayControl_pause(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_pause<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_replayControl_pausePtr
newCallback_replayControl_pause(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_pause<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_replayControl_resume : public Callback_replayControl_resume_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_replayControl_resume(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::replayControlPrx __proxy = ::jderobot::replayControlPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_resume(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_replayControl_resumePtr
newCallback_replayControl_resume(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_resume<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_replayControl_resumePtr
newCallback_replayControl_resume(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_resume<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_replayControl_resume : public Callback_replayControl_resume_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_replayControl_resume(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::replayControlPrx __proxy = ::jderobot::replayControlPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_resume(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_replayControl_resumePtr
newCallback_replayControl_resume(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_resume<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_replayControl_resumePtr
newCallback_replayControl_resume(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_resume<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_replayControl_setReplay : public Callback_replayControl_setReplay_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_replayControl_setReplay(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_replayControl_setReplayPtr
newCallback_replayControl_setReplay(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_setReplay<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_replayControl_setReplayPtr
newCallback_replayControl_setReplay(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_setReplay<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_replayControl_setReplayPtr
newCallback_replayControl_setReplay(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_setReplay<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_replayControl_setReplayPtr
newCallback_replayControl_setReplay(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_setReplay<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_replayControl_setReplay : public Callback_replayControl_setReplay_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_replayControl_setReplay(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_replayControl_setReplayPtr
newCallback_replayControl_setReplay(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_setReplay<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_replayControl_setReplayPtr
newCallback_replayControl_setReplay(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_setReplay<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_replayControl_setReplayPtr
newCallback_replayControl_setReplay(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_setReplay<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_replayControl_setReplayPtr
newCallback_replayControl_setReplay(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_setReplay<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_replayControl_setStep : public Callback_replayControl_setStep_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_replayControl_setStep(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::replayControlPrx __proxy = ::jderobot::replayControlPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setStep(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_replayControl_setStepPtr
newCallback_replayControl_setStep(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_setStep<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_replayControl_setStepPtr
newCallback_replayControl_setStep(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_setStep<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_replayControl_setStep : public Callback_replayControl_setStep_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_replayControl_setStep(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::replayControlPrx __proxy = ::jderobot::replayControlPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setStep(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_replayControl_setStepPtr
newCallback_replayControl_setStep(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_setStep<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_replayControl_setStepPtr
newCallback_replayControl_setStep(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_setStep<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_replayControl_getTime : public Callback_replayControl_getTime_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_replayControl_getTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::replayControlPrx __proxy = ::jderobot::replayControlPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_getTime(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_replayControl_getTimePtr
newCallback_replayControl_getTime(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_getTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_replayControl_getTimePtr
newCallback_replayControl_getTime(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_getTime<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_replayControl_getTime : public Callback_replayControl_getTime_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_replayControl_getTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::replayControlPrx __proxy = ::jderobot::replayControlPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_getTime(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_replayControl_getTimePtr
newCallback_replayControl_getTime(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_getTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_replayControl_getTimePtr
newCallback_replayControl_getTime(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_getTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_replayControl_goTo : public Callback_replayControl_goTo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_replayControl_goTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::replayControlPrx __proxy = ::jderobot::replayControlPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_goTo(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_replayControl_goToPtr
newCallback_replayControl_goTo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_goTo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_replayControl_goToPtr
newCallback_replayControl_goTo(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_goTo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_replayControl_goTo : public Callback_replayControl_goTo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_replayControl_goTo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::replayControlPrx __proxy = ::jderobot::replayControlPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_goTo(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_replayControl_goToPtr
newCallback_replayControl_goTo(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_goTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_replayControl_goToPtr
newCallback_replayControl_goTo(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_goTo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_replayControl_getStatus : public Callback_replayControl_getStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::jderobot::ReplayerStatus);

    CallbackNC_replayControl_getStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::replayControlPrx __proxy = ::jderobot::replayControlPrx::uncheckedCast(__result->getProxy());
        ::jderobot::ReplayerStatus __ret;
        try
        {
            __ret = __proxy->end_getStatus(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_replayControl_getStatusPtr
newCallback_replayControl_getStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(::jderobot::ReplayerStatus), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_getStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_replayControl_getStatusPtr
newCallback_replayControl_getStatus(T* instance, void (T::*cb)(::jderobot::ReplayerStatus), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_replayControl_getStatus<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_replayControl_getStatus : public Callback_replayControl_getStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::jderobot::ReplayerStatus, const CT&);

    Callback_replayControl_getStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::replayControlPrx __proxy = ::jderobot::replayControlPrx::uncheckedCast(__result->getProxy());
        ::jderobot::ReplayerStatus __ret;
        try
        {
            __ret = __proxy->end_getStatus(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_replayControl_getStatusPtr
newCallback_replayControl_getStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(::jderobot::ReplayerStatus, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_getStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_replayControl_getStatusPtr
newCallback_replayControl_getStatus(T* instance, void (T::*cb)(::jderobot::ReplayerStatus, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_replayControl_getStatus<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
