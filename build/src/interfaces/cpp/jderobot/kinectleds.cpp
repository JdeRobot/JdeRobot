// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `kinectleds.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <jderobot/kinectleds.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __jderobot__KinectLeds__setLedActive_name = "setLedActive";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::jderobot::upCast(::IceProxy::jderobot::KinectLeds* p) { return p; }

void
::IceProxy::jderobot::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::KinectLeds>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::jderobot::KinectLeds;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::jderobot::KinectLeds::setLedActive(::jderobot::KinectLedsAvailable __p_led, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __jderobot__KinectLeds__setLedActive_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_led);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::jderobot::KinectLeds::begin_setLedActive(::jderobot::KinectLedsAvailable __p_led, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __jderobot__KinectLeds__setLedActive_name, __del, __cookie);
    try
    {
        __result->prepare(__jderobot__KinectLeds__setLedActive_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_led);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::jderobot::KinectLeds::end_setLedActive(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __jderobot__KinectLeds__setLedActive_name);
}

const ::std::string&
IceProxy::jderobot::KinectLeds::ice_staticId()
{
    return ::jderobot::KinectLeds::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::jderobot::KinectLeds::__newInstance() const
{
    return new KinectLeds;
}

::Ice::Object* jderobot::upCast(::jderobot::KinectLeds* p) { return p; }

namespace
{
const ::std::string __jderobot__KinectLeds_ids[2] =
{
    "::Ice::Object",
    "::jderobot::KinectLeds"
};

}

bool
jderobot::KinectLeds::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__jderobot__KinectLeds_ids, __jderobot__KinectLeds_ids + 2, _s);
}

::std::vector< ::std::string>
jderobot::KinectLeds::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__jderobot__KinectLeds_ids[0], &__jderobot__KinectLeds_ids[2]);
}

const ::std::string&
jderobot::KinectLeds::ice_id(const ::Ice::Current&) const
{
    return __jderobot__KinectLeds_ids[1];
}

const ::std::string&
jderobot::KinectLeds::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::jderobot::KinectLeds";
    return typeId;
#else
    return __jderobot__KinectLeds_ids[1];
#endif
}

::Ice::DispatchStatus
jderobot::KinectLeds::___setLedActive(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::jderobot::KinectLedsAvailable __p_led;
    __is->read(__p_led);
    __inS.endReadParams();
    setLedActive(__p_led, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __jderobot__KinectLeds_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setLedActive"
};

}

::Ice::DispatchStatus
jderobot::KinectLeds::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__jderobot__KinectLeds_all, __jderobot__KinectLeds_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __jderobot__KinectLeds_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___setLedActive(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
jderobot::KinectLeds::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
jderobot::KinectLeds::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
jderobot::__patch(KinectLedsPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::jderobot::KinectLedsPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::jderobot::KinectLeds::ice_staticId(), v);
    }
}
