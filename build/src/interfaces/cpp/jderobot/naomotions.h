// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `naomotions.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot__home_fran_fqez_build_src_interfaces_cpp_jderobot_naomotions_h__
#define __jderobot__home_fran_fqez_build_src_interfaces_cpp_jderobot_naomotions_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <jderobot/common.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace jderobot
{

class NaoMotions;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::NaoMotions>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::NaoMotions*);

}

}

namespace jderobot
{

class NaoMotions;
::Ice::Object* upCast(::jderobot::NaoMotions*);
typedef ::IceInternal::Handle< ::jderobot::NaoMotions> NaoMotionsPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::NaoMotions> NaoMotionsPrx;
void __patch(NaoMotionsPtr&, const ::Ice::ObjectPtr&);

}

namespace jderobot
{

enum MotionType
{
    RigthKick,
    LeftKick,
    StandupBack,
    StandupFront,
    Intercept,
    ChangeCamera,
    ResetNaoqi
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::jderobot::MotionType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 6;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

}

namespace jderobot
{

class Callback_NaoMotions_setMotion_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NaoMotions_setMotion_Base> Callback_NaoMotions_setMotionPtr;

}

namespace IceProxy
{

namespace jderobot
{

class NaoMotions : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int setMotion(::jderobot::MotionType __p_motion)
    {
        return setMotion(__p_motion, 0);
    }
    ::Ice::Int setMotion(::jderobot::MotionType __p_motion, const ::Ice::Context& __ctx)
    {
        return setMotion(__p_motion, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setMotion(::jderobot::MotionType __p_motion, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setMotion(__p_motion, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setMotion(::jderobot::MotionType __p_motion, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setMotion(__p_motion, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setMotion(::jderobot::MotionType __p_motion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setMotion(__p_motion, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setMotion(::jderobot::MotionType __p_motion, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setMotion(__p_motion, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setMotion(::jderobot::MotionType __p_motion, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setMotion(::jderobot::MotionType __p_motion)
    {
        return begin_setMotion(__p_motion, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMotion(::jderobot::MotionType __p_motion, const ::Ice::Context& __ctx)
    {
        return begin_setMotion(__p_motion, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setMotion(::jderobot::MotionType __p_motion, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMotion(__p_motion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMotion(::jderobot::MotionType __p_motion, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMotion(__p_motion, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMotion(::jderobot::MotionType __p_motion, const ::jderobot::Callback_NaoMotions_setMotionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMotion(__p_motion, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setMotion(::jderobot::MotionType __p_motion, const ::Ice::Context& __ctx, const ::jderobot::Callback_NaoMotions_setMotionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setMotion(__p_motion, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_setMotion(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int setMotion(::jderobot::MotionType, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setMotion(::jderobot::MotionType, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_secure(bool __secure) const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_twoway() const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_oneway() const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_batchOneway() const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_datagram() const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_batchDatagram() const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_compress(bool __compress) const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_timeout(int __timeout) const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<NaoMotions> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<NaoMotions*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace jderobot
{

class NaoMotions : virtual public ::Ice::Object
{
public:

    typedef NaoMotionsPrx ProxyType;
    typedef NaoMotionsPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int setMotion(::jderobot::MotionType, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setMotion(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const NaoMotions& l, const NaoMotions& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const NaoMotions& l, const NaoMotions& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace jderobot
{

template<class T>
class CallbackNC_NaoMotions_setMotion : public Callback_NaoMotions_setMotion_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_NaoMotions_setMotion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::NaoMotionsPrx __proxy = ::jderobot::NaoMotionsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setMotion(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_NaoMotions_setMotionPtr
newCallback_NaoMotions_setMotion(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NaoMotions_setMotion<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NaoMotions_setMotionPtr
newCallback_NaoMotions_setMotion(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NaoMotions_setMotion<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_NaoMotions_setMotion : public Callback_NaoMotions_setMotion_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_NaoMotions_setMotion(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::NaoMotionsPrx __proxy = ::jderobot::NaoMotionsPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setMotion(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_NaoMotions_setMotionPtr
newCallback_NaoMotions_setMotion(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NaoMotions_setMotion<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NaoMotions_setMotionPtr
newCallback_NaoMotions_setMotion(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NaoMotions_setMotion<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
