// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `namingService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <jderobot/namingService.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __jderobot__NamingService__bind_name = "bind";

const ::std::string __jderobot__NamingService__unbind_name = "unbind";

const ::std::string __jderobot__NamingService__resolveByName_name = "resolveByName";

const ::std::string __jderobot__NamingService__resolveByInterface_name = "resolveByInterface";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::jderobot::NameAlreadyExistException> __jderobot__NameAlreadyExistException_init("::jderobot::NameAlreadyExistException");

}

jderobot::NameAlreadyExistException::NameAlreadyExistException(const ::std::string& __ice_what) :
    ::jderobot::JderobotException(__ice_what)
{
}

jderobot::NameAlreadyExistException::~NameAlreadyExistException() throw()
{
}

::std::string
jderobot::NameAlreadyExistException::ice_name() const
{
    return "jderobot::NameAlreadyExistException";
}

jderobot::NameAlreadyExistException*
jderobot::NameAlreadyExistException::ice_clone() const
{
    return new NameAlreadyExistException(*this);
}

void
jderobot::NameAlreadyExistException::ice_throw() const
{
    throw *this;
}

void
jderobot::NameAlreadyExistException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::jderobot::NameAlreadyExistException", -1, false);
    __os->endWriteSlice();
    ::jderobot::JderobotException::__writeImpl(__os);
}

void
jderobot::NameAlreadyExistException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::jderobot::JderobotException::__readImpl(__is);
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::jderobot::NameNotExistException> __jderobot__NameNotExistException_init("::jderobot::NameNotExistException");

}

jderobot::NameNotExistException::NameNotExistException(const ::std::string& __ice_what) :
    ::jderobot::JderobotException(__ice_what)
{
}

jderobot::NameNotExistException::~NameNotExistException() throw()
{
}

::std::string
jderobot::NameNotExistException::ice_name() const
{
    return "jderobot::NameNotExistException";
}

jderobot::NameNotExistException*
jderobot::NameNotExistException::ice_clone() const
{
    return new NameNotExistException(*this);
}

void
jderobot::NameNotExistException::ice_throw() const
{
    throw *this;
}

void
jderobot::NameNotExistException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::jderobot::NameNotExistException", -1, false);
    __os->endWriteSlice();
    ::jderobot::JderobotException::__writeImpl(__os);
}

void
jderobot::NameNotExistException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::jderobot::JderobotException::__readImpl(__is);
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::jderobot::InterfaceNotExistException> __jderobot__InterfaceNotExistException_init("::jderobot::InterfaceNotExistException");

}

jderobot::InterfaceNotExistException::InterfaceNotExistException(const ::std::string& __ice_what) :
    ::jderobot::JderobotException(__ice_what)
{
}

jderobot::InterfaceNotExistException::~InterfaceNotExistException() throw()
{
}

::std::string
jderobot::InterfaceNotExistException::ice_name() const
{
    return "jderobot::InterfaceNotExistException";
}

jderobot::InterfaceNotExistException*
jderobot::InterfaceNotExistException::ice_clone() const
{
    return new InterfaceNotExistException(*this);
}

void
jderobot::InterfaceNotExistException::ice_throw() const
{
    throw *this;
}

void
jderobot::InterfaceNotExistException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::jderobot::InterfaceNotExistException", -1, false);
    __os->endWriteSlice();
    ::jderobot::JderobotException::__writeImpl(__os);
}

void
jderobot::InterfaceNotExistException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::jderobot::JderobotException::__readImpl(__is);
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::jderobot::upCast(::IceProxy::jderobot::NamingNode* p) { return p; }

void
::IceProxy::jderobot::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::NamingNode>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::jderobot::NamingNode;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::jderobot::NamingNode::ice_staticId()
{
    return ::jderobot::NamingNode::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::jderobot::NamingNode::__newInstance() const
{
    return new NamingNode;
}
::IceProxy::Ice::Object* ::IceProxy::jderobot::upCast(::IceProxy::jderobot::NodeContainer* p) { return p; }

void
::IceProxy::jderobot::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::NodeContainer>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::jderobot::NodeContainer;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::jderobot::NodeContainer::ice_staticId()
{
    return ::jderobot::NodeContainer::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::jderobot::NodeContainer::__newInstance() const
{
    return new NodeContainer;
}
::IceProxy::Ice::Object* ::IceProxy::jderobot::upCast(::IceProxy::jderobot::NamingService* p) { return p; }

void
::IceProxy::jderobot::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::NamingService>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::jderobot::NamingService;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::jderobot::NamingService::bind(const ::jderobot::NamingNodePtr& __p_node, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__jderobot__NamingService__bind_name);
    ::IceInternal::Outgoing __og(this, __jderobot__NamingService__bind_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_node);
        __os->writePendingObjects();
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::jderobot::NameAlreadyExistException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::jderobot::NamingService::begin_bind(const ::jderobot::NamingNodePtr& __p_node, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__jderobot__NamingService__bind_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __jderobot__NamingService__bind_name, __del, __cookie);
    try
    {
        __result->prepare(__jderobot__NamingService__bind_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_node);
        __os->writePendingObjects();
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::jderobot::NamingService::__begin_bind(const ::jderobot::NamingNodePtr& __p_node, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::jderobot::NamingServicePrx __proxy = ::jderobot::NamingServicePrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_bind(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_bind(__p_node, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::jderobot::NamingService::end_bind(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __jderobot__NamingService__bind_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::jderobot::NameAlreadyExistException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::jderobot::NamingService::unbind(const ::jderobot::NamingNodePtr& __p_node, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__jderobot__NamingService__unbind_name);
    ::IceInternal::Outgoing __og(this, __jderobot__NamingService__unbind_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_node);
        __os->writePendingObjects();
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::jderobot::NameAlreadyExistException&)
        {
            throw;
        }
        catch(const ::jderobot::NameNotExistException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::jderobot::NamingService::begin_unbind(const ::jderobot::NamingNodePtr& __p_node, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__jderobot__NamingService__unbind_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __jderobot__NamingService__unbind_name, __del, __cookie);
    try
    {
        __result->prepare(__jderobot__NamingService__unbind_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_node);
        __os->writePendingObjects();
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::jderobot::NamingService::__begin_unbind(const ::jderobot::NamingNodePtr& __p_node, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::jderobot::NamingServicePrx __proxy = ::jderobot::NamingServicePrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_unbind(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_unbind(__p_node, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::jderobot::NamingService::end_unbind(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __jderobot__NamingService__unbind_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::jderobot::NameAlreadyExistException&)
        {
            throw;
        }
        catch(const ::jderobot::NameNotExistException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

::jderobot::NodeContainerPtr
IceProxy::jderobot::NamingService::resolveByName(const ::std::string& __p_name, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__jderobot__NamingService__resolveByName_name);
    ::IceInternal::Outgoing __og(this, __jderobot__NamingService__resolveByName_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::jderobot::NameNotExistException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::jderobot::NodeContainerPtr __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __is->readPendingObjects();
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::jderobot::NamingService::begin_resolveByName(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__jderobot__NamingService__resolveByName_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __jderobot__NamingService__resolveByName_name, __del, __cookie);
    try
    {
        __result->prepare(__jderobot__NamingService__resolveByName_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::jderobot::NamingService::__begin_resolveByName(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::jderobot::NodeContainerPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::jderobot::NodeContainerPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::jderobot::NamingServicePrx __proxy = ::jderobot::NamingServicePrx::uncheckedCast(__result->getProxy());
            ::jderobot::NodeContainerPtr __ret;
            try
            {
                __ret = __proxy->end_resolveByName(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::jderobot::NodeContainerPtr&)> _response;
    };
    return begin_resolveByName(__p_name, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::jderobot::NodeContainerPtr
IceProxy::jderobot::NamingService::end_resolveByName(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __jderobot__NamingService__resolveByName_name);
    ::jderobot::NodeContainerPtr __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::jderobot::NameNotExistException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __is->readPendingObjects();
    __result->__endReadParams();
    return __ret;
}

::jderobot::NodeContainerPtr
IceProxy::jderobot::NamingService::resolveByInterface(const ::std::string& __p_interfaceName, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__jderobot__NamingService__resolveByInterface_name);
    ::IceInternal::Outgoing __og(this, __jderobot__NamingService__resolveByInterface_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_interfaceName);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::jderobot::InterfaceNotExistException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::jderobot::NodeContainerPtr __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __is->readPendingObjects();
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::jderobot::NamingService::begin_resolveByInterface(const ::std::string& __p_interfaceName, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__jderobot__NamingService__resolveByInterface_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __jderobot__NamingService__resolveByInterface_name, __del, __cookie);
    try
    {
        __result->prepare(__jderobot__NamingService__resolveByInterface_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_interfaceName);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::jderobot::NamingService::__begin_resolveByInterface(const ::std::string& __p_interfaceName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::jderobot::NodeContainerPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::jderobot::NodeContainerPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::jderobot::NamingServicePrx __proxy = ::jderobot::NamingServicePrx::uncheckedCast(__result->getProxy());
            ::jderobot::NodeContainerPtr __ret;
            try
            {
                __ret = __proxy->end_resolveByInterface(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::jderobot::NodeContainerPtr&)> _response;
    };
    return begin_resolveByInterface(__p_interfaceName, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::jderobot::NodeContainerPtr
IceProxy::jderobot::NamingService::end_resolveByInterface(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __jderobot__NamingService__resolveByInterface_name);
    ::jderobot::NodeContainerPtr __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::jderobot::InterfaceNotExistException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __is->readPendingObjects();
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::jderobot::NamingService::ice_staticId()
{
    return ::jderobot::NamingService::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::jderobot::NamingService::__newInstance() const
{
    return new NamingService;
}

::Ice::Object* jderobot::upCast(::jderobot::NamingNode* p) { return p; }
::Ice::ObjectPtr
jderobot::NamingNode::ice_clone() const
{
    ::Ice::Object* __p = new NamingNode(*this);
    return __p;
}

namespace
{
const ::std::string __jderobot__NamingNode_ids[2] =
{
    "::Ice::Object",
    "::jderobot::NamingNode"
};

}

bool
jderobot::NamingNode::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__jderobot__NamingNode_ids, __jderobot__NamingNode_ids + 2, _s);
}

::std::vector< ::std::string>
jderobot::NamingNode::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__jderobot__NamingNode_ids[0], &__jderobot__NamingNode_ids[2]);
}

const ::std::string&
jderobot::NamingNode::ice_id(const ::Ice::Current&) const
{
    return __jderobot__NamingNode_ids[1];
}

const ::std::string&
jderobot::NamingNode::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::jderobot::NamingNode";
    return typeId;
#else
    return __jderobot__NamingNode_ids[1];
#endif
}

void
jderobot::NamingNode::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(name);
    __os->write(interfaceName);
    __os->write(protocol);
    __os->write(ip);
    __os->write(port);
    __os->endWriteSlice();
}

void
jderobot::NamingNode::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(name);
    __is->read(interfaceName);
    __is->read(protocol);
    __is->read(ip);
    __is->read(port);
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultObjectFactoryInit< ::jderobot::NamingNode> __jderobot__NamingNode_init("::jderobot::NamingNode");
}

::Ice::ObjectFactoryPtr
jderobot::NamingNode::ice_factory()
{
    return ::IceInternal::factoryTable->getObjectFactory(::jderobot::NamingNode::ice_staticId());
}

void 
jderobot::__patch(NamingNodePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::jderobot::NamingNodePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::jderobot::NamingNode::ice_staticId(), v);
    }
}

::Ice::Object* jderobot::upCast(::jderobot::NodeContainer* p) { return p; }

#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
jderobot::NodeContainer::ice_clone() const
{
    ::Ice::Object* __p = new NodeContainer(*this);
    return __p;
}
#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string __jderobot__NodeContainer_ids[2] =
{
    "::Ice::Object",
    "::jderobot::NodeContainer"
};

}

bool
jderobot::NodeContainer::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__jderobot__NodeContainer_ids, __jderobot__NodeContainer_ids + 2, _s);
}

::std::vector< ::std::string>
jderobot::NodeContainer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__jderobot__NodeContainer_ids[0], &__jderobot__NodeContainer_ids[2]);
}

const ::std::string&
jderobot::NodeContainer::ice_id(const ::Ice::Current&) const
{
    return __jderobot__NodeContainer_ids[1];
}

const ::std::string&
jderobot::NodeContainer::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::jderobot::NodeContainer";
    return typeId;
#else
    return __jderobot__NodeContainer_ids[1];
#endif
}

void
jderobot::NodeContainer::__gcVisitMembers(::IceInternal::GCVisitor& _v)
{
    {
        for(::jderobot::nodeList::iterator _i0 = nodes.begin(); _i0 != nodes.end(); ++_i0)
        {
            if((*_i0))
            {
                if((::jderobot::upCast((*_i0).get())->__gcVisit(_v)))
                {
                    (*_i0) = 0;
                }
            }
        }
    }
}

void
jderobot::NodeContainer::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(nodes);
    __os->endWriteSlice();
}

void
jderobot::NodeContainer::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(nodes);
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultObjectFactoryInit< ::jderobot::NodeContainer> __jderobot__NodeContainer_init("::jderobot::NodeContainer");
}

::Ice::ObjectFactoryPtr
jderobot::NodeContainer::ice_factory()
{
    return ::IceInternal::factoryTable->getObjectFactory(::jderobot::NodeContainer::ice_staticId());
}

void 
jderobot::__patch(NodeContainerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::jderobot::NodeContainerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::jderobot::NodeContainer::ice_staticId(), v);
    }
}

::Ice::Object* jderobot::upCast(::jderobot::NamingService* p) { return p; }

namespace
{
const ::std::string __jderobot__NamingService_ids[2] =
{
    "::Ice::Object",
    "::jderobot::NamingService"
};

}

bool
jderobot::NamingService::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__jderobot__NamingService_ids, __jderobot__NamingService_ids + 2, _s);
}

::std::vector< ::std::string>
jderobot::NamingService::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__jderobot__NamingService_ids[0], &__jderobot__NamingService_ids[2]);
}

const ::std::string&
jderobot::NamingService::ice_id(const ::Ice::Current&) const
{
    return __jderobot__NamingService_ids[1];
}

const ::std::string&
jderobot::NamingService::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::jderobot::NamingService";
    return typeId;
#else
    return __jderobot__NamingService_ids[1];
#endif
}

::Ice::DispatchStatus
jderobot::NamingService::___bind(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::jderobot::NamingNodePtr __p_node;
    __is->read(__p_node);
    __is->readPendingObjects();
    __inS.endReadParams();
    try
    {
        bind(__p_node, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::jderobot::NameAlreadyExistException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
jderobot::NamingService::___unbind(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::jderobot::NamingNodePtr __p_node;
    __is->read(__p_node);
    __is->readPendingObjects();
    __inS.endReadParams();
    try
    {
        unbind(__p_node, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::jderobot::NameAlreadyExistException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::jderobot::NameNotExistException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
jderobot::NamingService::___resolveByName(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    __is->read(__p_name);
    __inS.endReadParams();
    try
    {
        ::jderobot::NodeContainerPtr __ret = resolveByName(__p_name, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __os->writePendingObjects();
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::jderobot::NameNotExistException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
jderobot::NamingService::___resolveByInterface(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_interfaceName;
    __is->read(__p_interfaceName);
    __inS.endReadParams();
    try
    {
        ::jderobot::NodeContainerPtr __ret = resolveByInterface(__p_interfaceName, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __os->writePendingObjects();
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::jderobot::InterfaceNotExistException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __jderobot__NamingService_all[] =
{
    "bind",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "resolveByInterface",
    "resolveByName",
    "unbind"
};

}

::Ice::DispatchStatus
jderobot::NamingService::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__jderobot__NamingService_all, __jderobot__NamingService_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __jderobot__NamingService_all)
    {
        case 0:
        {
            return ___bind(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___resolveByInterface(in, current);
        }
        case 6:
        {
            return ___resolveByName(in, current);
        }
        case 7:
        {
            return ___unbind(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
jderobot::NamingService::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
jderobot::NamingService::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
jderobot::__patch(NamingServicePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::jderobot::NamingServicePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::jderobot::NamingService::ice_staticId(), v);
    }
}
