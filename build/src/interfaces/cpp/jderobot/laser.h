// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `laser.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot__home_fran_fqez_build_src_interfaces_cpp_jderobot_laser_h__
#define __jderobot__home_fran_fqez_build_src_interfaces_cpp_jderobot_laser_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <jderobot/common.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace jderobot
{

class LaserData;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::LaserData>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::LaserData*);

class Laser;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::Laser>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::Laser*);

}

}

namespace jderobot
{

class LaserData;
::Ice::Object* upCast(::jderobot::LaserData*);
typedef ::IceInternal::Handle< ::jderobot::LaserData> LaserDataPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::LaserData> LaserDataPrx;
void __patch(LaserDataPtr&, const ::Ice::ObjectPtr&);

class Laser;
::Ice::Object* upCast(::jderobot::Laser*);
typedef ::IceInternal::Handle< ::jderobot::Laser> LaserPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::Laser> LaserPrx;
void __patch(LaserPtr&, const ::Ice::ObjectPtr&);

}

namespace jderobot
{

class Callback_Laser_getLaserData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Laser_getLaserData_Base> Callback_Laser_getLaserDataPtr;

}

namespace IceProxy
{

namespace jderobot
{

class LaserData : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<LaserData> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<LaserData> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<LaserData> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<LaserData> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<LaserData> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<LaserData> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<LaserData> ice_secure(bool __secure) const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<LaserData> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<LaserData> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<LaserData> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<LaserData> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<LaserData> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<LaserData> ice_twoway() const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<LaserData> ice_oneway() const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<LaserData> ice_batchOneway() const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<LaserData> ice_datagram() const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<LaserData> ice_batchDatagram() const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<LaserData> ice_compress(bool __compress) const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<LaserData> ice_timeout(int __timeout) const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<LaserData> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<LaserData> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<LaserData*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Laser : virtual public ::IceProxy::Ice::Object
{
public:

    ::jderobot::LaserDataPtr getLaserData()
    {
        return getLaserData(0);
    }
    ::jderobot::LaserDataPtr getLaserData(const ::Ice::Context& __ctx)
    {
        return getLaserData(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getLaserData(const ::IceInternal::Function<void (const ::jderobot::LaserDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLaserData(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLaserData(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLaserData(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getLaserData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::jderobot::LaserDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLaserData(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLaserData(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLaserData(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getLaserData(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::jderobot::LaserDataPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getLaserData()
    {
        return begin_getLaserData(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLaserData(const ::Ice::Context& __ctx)
    {
        return begin_getLaserData(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLaserData(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLaserData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLaserData(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLaserData(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLaserData(const ::jderobot::Callback_Laser_getLaserDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLaserData(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLaserData(const ::Ice::Context& __ctx, const ::jderobot::Callback_Laser_getLaserDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLaserData(&__ctx, __del, __cookie);
    }

    ::jderobot::LaserDataPtr end_getLaserData(const ::Ice::AsyncResultPtr&);
    
private:

    ::jderobot::LaserDataPtr getLaserData(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getLaserData(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Laser> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Laser> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Laser> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Laser> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Laser> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Laser> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Laser> ice_secure(bool __secure) const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Laser> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Laser> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Laser> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Laser> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Laser> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Laser> ice_twoway() const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Laser> ice_oneway() const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Laser> ice_batchOneway() const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Laser> ice_datagram() const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Laser> ice_batchDatagram() const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Laser> ice_compress(bool __compress) const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Laser> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Laser> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Laser> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Laser*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace jderobot
{

class LaserData : virtual public ::Ice::Object
{
public:

    typedef LaserDataPrx ProxyType;
    typedef LaserDataPtr PointerType;

    LaserData()
    {
    }

    LaserData(const ::jderobot::IntSeq& __ice_distanceData, ::Ice::Int __ice_numLaser, ::Ice::Float __ice_minAngle, ::Ice::Float __ice_maxAngle, ::Ice::Float __ice_minRange, ::Ice::Float __ice_maxRange, const ::jderobot::Time& __ice_timeStamp) :
        distanceData(__ice_distanceData),
        numLaser(__ice_numLaser),
        minAngle(__ice_minAngle),
        maxAngle(__ice_maxAngle),
        minRange(__ice_minRange),
        maxRange(__ice_maxRange),
        timeStamp(__ice_timeStamp)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static ::Ice::ObjectFactoryPtr ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;

public:

    ::jderobot::IntSeq distanceData;

    ::Ice::Int numLaser;

    ::Ice::Float minAngle;

    ::Ice::Float maxAngle;

    ::Ice::Float minRange;

    ::Ice::Float maxRange;

    ::jderobot::Time timeStamp;
protected:

    virtual ~LaserData() {}

friend class LaserData__staticInit;
};
#if !defined(_MSC_VER) || (_MSC_VER < 1900)
//
// COMPILERFIX: Visual Studio 2015 update 1 fails to access
// the proected destructor from a friend class.
//

class LaserData__staticInit
{
public:

    ::jderobot::LaserData _init;
};

static LaserData__staticInit _LaserData_init;
#else
static auto _LaserData_init = ::jderobot::LaserData::ice_factory;
#endif

inline bool operator==(const LaserData& l, const LaserData& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const LaserData& l, const LaserData& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Laser : virtual public ::Ice::Object
{
public:

    typedef LaserPrx ProxyType;
    typedef LaserPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::jderobot::LaserDataPtr getLaserData(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getLaserData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Laser& l, const Laser& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Laser& l, const Laser& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace jderobot
{

template<class T>
class CallbackNC_Laser_getLaserData : public Callback_Laser_getLaserData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::jderobot::LaserDataPtr&);

    CallbackNC_Laser_getLaserData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::LaserPrx __proxy = ::jderobot::LaserPrx::uncheckedCast(__result->getProxy());
        ::jderobot::LaserDataPtr __ret;
        try
        {
            __ret = __proxy->end_getLaserData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Laser_getLaserDataPtr
newCallback_Laser_getLaserData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::LaserDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Laser_getLaserData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Laser_getLaserDataPtr
newCallback_Laser_getLaserData(T* instance, void (T::*cb)(const ::jderobot::LaserDataPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Laser_getLaserData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Laser_getLaserData : public Callback_Laser_getLaserData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::jderobot::LaserDataPtr&, const CT&);

    Callback_Laser_getLaserData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::LaserPrx __proxy = ::jderobot::LaserPrx::uncheckedCast(__result->getProxy());
        ::jderobot::LaserDataPtr __ret;
        try
        {
            __ret = __proxy->end_getLaserData(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Laser_getLaserDataPtr
newCallback_Laser_getLaserData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::LaserDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Laser_getLaserData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Laser_getLaserDataPtr
newCallback_Laser_getLaserData(T* instance, void (T::*cb)(const ::jderobot::LaserDataPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Laser_getLaserData<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
