// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `bodymotors.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <jderobot/bodymotors.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __jderobot__BodyMotors__getBodyMotorsParam_name = "getBodyMotorsParam";

const ::std::string __jderobot__BodyMotors__setBodyMotorsData_name = "setBodyMotorsData";

}
::IceProxy::Ice::Object* ::IceProxy::jderobot::upCast(::IceProxy::jderobot::BodyMotorsParam* p) { return p; }

void
::IceProxy::jderobot::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::BodyMotorsParam>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::jderobot::BodyMotorsParam;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::jderobot::BodyMotorsParam::ice_staticId()
{
    return ::jderobot::BodyMotorsParam::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::jderobot::BodyMotorsParam::__newInstance() const
{
    return new BodyMotorsParam;
}
::IceProxy::Ice::Object* ::IceProxy::jderobot::upCast(::IceProxy::jderobot::BodyMotors* p) { return p; }

void
::IceProxy::jderobot::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::BodyMotors>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::jderobot::BodyMotors;
        v->__copyFrom(proxy);
    }
}

::jderobot::BodyMotorsParamPtr
IceProxy::jderobot::BodyMotors::getBodyMotorsParam(::jderobot::MotorsName __p_name, ::jderobot::BodySide __p_side, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__jderobot__BodyMotors__getBodyMotorsParam_name);
    ::IceInternal::Outgoing __og(this, __jderobot__BodyMotors__getBodyMotorsParam_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_side);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::jderobot::BodyMotorsParamPtr __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __is->readPendingObjects();
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::jderobot::BodyMotors::begin_getBodyMotorsParam(::jderobot::MotorsName __p_name, ::jderobot::BodySide __p_side, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__jderobot__BodyMotors__getBodyMotorsParam_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __jderobot__BodyMotors__getBodyMotorsParam_name, __del, __cookie);
    try
    {
        __result->prepare(__jderobot__BodyMotors__getBodyMotorsParam_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_side);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::jderobot::BodyMotors::__begin_getBodyMotorsParam(::jderobot::MotorsName __p_name, ::jderobot::BodySide __p_side, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::jderobot::BodyMotorsParamPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::jderobot::BodyMotorsParamPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::jderobot::BodyMotorsPrx __proxy = ::jderobot::BodyMotorsPrx::uncheckedCast(__result->getProxy());
            ::jderobot::BodyMotorsParamPtr __ret;
            try
            {
                __ret = __proxy->end_getBodyMotorsParam(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::jderobot::BodyMotorsParamPtr&)> _response;
    };
    return begin_getBodyMotorsParam(__p_name, __p_side, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::jderobot::BodyMotorsParamPtr
IceProxy::jderobot::BodyMotors::end_getBodyMotorsParam(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __jderobot__BodyMotors__getBodyMotorsParam_name);
    ::jderobot::BodyMotorsParamPtr __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __is->readPendingObjects();
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::jderobot::BodyMotors::setBodyMotorsData(::jderobot::MotorsName __p_name, ::jderobot::BodySide __p_side, ::Ice::Float __p_angle, ::Ice::Float __p_speed, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__jderobot__BodyMotors__setBodyMotorsData_name);
    ::IceInternal::Outgoing __og(this, __jderobot__BodyMotors__setBodyMotorsData_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_side);
        __os->write(__p_angle);
        __os->write(__p_speed);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::jderobot::BodyMotors::begin_setBodyMotorsData(::jderobot::MotorsName __p_name, ::jderobot::BodySide __p_side, ::Ice::Float __p_angle, ::Ice::Float __p_speed, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__jderobot__BodyMotors__setBodyMotorsData_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __jderobot__BodyMotors__setBodyMotorsData_name, __del, __cookie);
    try
    {
        __result->prepare(__jderobot__BodyMotors__setBodyMotorsData_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __os->write(__p_side);
        __os->write(__p_angle);
        __os->write(__p_speed);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::jderobot::BodyMotors::__begin_setBodyMotorsData(::jderobot::MotorsName __p_name, ::jderobot::BodySide __p_side, ::Ice::Float __p_angle, ::Ice::Float __p_speed, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::jderobot::BodyMotorsPrx __proxy = ::jderobot::BodyMotorsPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_setBodyMotorsData(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_setBodyMotorsData(__p_name, __p_side, __p_angle, __p_speed, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::jderobot::BodyMotors::end_setBodyMotorsData(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __jderobot__BodyMotors__setBodyMotorsData_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::jderobot::BodyMotors::ice_staticId()
{
    return ::jderobot::BodyMotors::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::jderobot::BodyMotors::__newInstance() const
{
    return new BodyMotors;
}

::Ice::Object* jderobot::upCast(::jderobot::BodyMotorsParam* p) { return p; }
::Ice::ObjectPtr
jderobot::BodyMotorsParam::ice_clone() const
{
    ::Ice::Object* __p = new BodyMotorsParam(*this);
    return __p;
}

namespace
{
const ::std::string __jderobot__BodyMotorsParam_ids[2] =
{
    "::Ice::Object",
    "::jderobot::BodyMotorsParam"
};

}

bool
jderobot::BodyMotorsParam::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__jderobot__BodyMotorsParam_ids, __jderobot__BodyMotorsParam_ids + 2, _s);
}

::std::vector< ::std::string>
jderobot::BodyMotorsParam::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__jderobot__BodyMotorsParam_ids[0], &__jderobot__BodyMotorsParam_ids[2]);
}

const ::std::string&
jderobot::BodyMotorsParam::ice_id(const ::Ice::Current&) const
{
    return __jderobot__BodyMotorsParam_ids[1];
}

const ::std::string&
jderobot::BodyMotorsParam::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::jderobot::BodyMotorsParam";
    return typeId;
#else
    return __jderobot__BodyMotorsParam_ids[1];
#endif
}

void
jderobot::BodyMotorsParam::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->write(minAngle);
    __os->write(maxAngle);
    __os->write(maxSpeed);
    __os->endWriteSlice();
}

void
jderobot::BodyMotorsParam::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(minAngle);
    __is->read(maxAngle);
    __is->read(maxSpeed);
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultObjectFactoryInit< ::jderobot::BodyMotorsParam> __jderobot__BodyMotorsParam_init("::jderobot::BodyMotorsParam");
}

::Ice::ObjectFactoryPtr
jderobot::BodyMotorsParam::ice_factory()
{
    return ::IceInternal::factoryTable->getObjectFactory(::jderobot::BodyMotorsParam::ice_staticId());
}

void 
jderobot::__patch(BodyMotorsParamPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::jderobot::BodyMotorsParamPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::jderobot::BodyMotorsParam::ice_staticId(), v);
    }
}

::Ice::Object* jderobot::upCast(::jderobot::BodyMotors* p) { return p; }

namespace
{
const ::std::string __jderobot__BodyMotors_ids[2] =
{
    "::Ice::Object",
    "::jderobot::BodyMotors"
};

}

bool
jderobot::BodyMotors::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__jderobot__BodyMotors_ids, __jderobot__BodyMotors_ids + 2, _s);
}

::std::vector< ::std::string>
jderobot::BodyMotors::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__jderobot__BodyMotors_ids[0], &__jderobot__BodyMotors_ids[2]);
}

const ::std::string&
jderobot::BodyMotors::ice_id(const ::Ice::Current&) const
{
    return __jderobot__BodyMotors_ids[1];
}

const ::std::string&
jderobot::BodyMotors::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::jderobot::BodyMotors";
    return typeId;
#else
    return __jderobot__BodyMotors_ids[1];
#endif
}

::Ice::DispatchStatus
jderobot::BodyMotors::___getBodyMotorsParam(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::jderobot::MotorsName __p_name;
    ::jderobot::BodySide __p_side;
    __is->read(__p_name);
    __is->read(__p_side);
    __inS.endReadParams();
    ::jderobot::BodyMotorsParamPtr __ret = getBodyMotorsParam(__p_name, __p_side, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __os->writePendingObjects();
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
jderobot::BodyMotors::___setBodyMotorsData(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::jderobot::MotorsName __p_name;
    ::jderobot::BodySide __p_side;
    ::Ice::Float __p_angle;
    ::Ice::Float __p_speed;
    __is->read(__p_name);
    __is->read(__p_side);
    __is->read(__p_angle);
    __is->read(__p_speed);
    __inS.endReadParams();
    ::Ice::Int __ret = setBodyMotorsData(__p_name, __p_side, __p_angle, __p_speed, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __jderobot__BodyMotors_all[] =
{
    "getBodyMotorsParam",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setBodyMotorsData"
};

}

::Ice::DispatchStatus
jderobot::BodyMotors::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__jderobot__BodyMotors_all, __jderobot__BodyMotors_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __jderobot__BodyMotors_all)
    {
        case 0:
        {
            return ___getBodyMotorsParam(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___setBodyMotorsData(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
jderobot::BodyMotors::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
jderobot::BodyMotors::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
jderobot::__patch(BodyMotorsPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::jderobot::BodyMotorsPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::jderobot::BodyMotors::ice_staticId(), v);
    }
}
