// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `ardroneextra.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot__home_fran_fqez_build_src_interfaces_cpp_jderobot_ardroneextra_h__
#define __jderobot__home_fran_fqez_build_src_interfaces_cpp_jderobot_ardroneextra_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace jderobot
{

class ArDroneExtra;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::ArDroneExtra>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::ArDroneExtra*);

}

}

namespace jderobot
{

class ArDroneExtra;
::Ice::Object* upCast(::jderobot::ArDroneExtra*);
typedef ::IceInternal::Handle< ::jderobot::ArDroneExtra> ArDroneExtraPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::ArDroneExtra> ArDroneExtraPrx;
void __patch(ArDroneExtraPtr&, const ::Ice::ObjectPtr&);

}

namespace jderobot
{

class Callback_ArDroneExtra_toggleCam_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ArDroneExtra_toggleCam_Base> Callback_ArDroneExtra_toggleCamPtr;

class Callback_ArDroneExtra_land_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ArDroneExtra_land_Base> Callback_ArDroneExtra_landPtr;

class Callback_ArDroneExtra_takeoff_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ArDroneExtra_takeoff_Base> Callback_ArDroneExtra_takeoffPtr;

class Callback_ArDroneExtra_reset_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ArDroneExtra_reset_Base> Callback_ArDroneExtra_resetPtr;

class Callback_ArDroneExtra_recordOnUsb_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ArDroneExtra_recordOnUsb_Base> Callback_ArDroneExtra_recordOnUsbPtr;

class Callback_ArDroneExtra_ledAnimation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ArDroneExtra_ledAnimation_Base> Callback_ArDroneExtra_ledAnimationPtr;

class Callback_ArDroneExtra_flightAnimation_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ArDroneExtra_flightAnimation_Base> Callback_ArDroneExtra_flightAnimationPtr;

class Callback_ArDroneExtra_flatTrim_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ArDroneExtra_flatTrim_Base> Callback_ArDroneExtra_flatTrimPtr;

}

namespace IceProxy
{

namespace jderobot
{

class ArDroneExtra : virtual public ::IceProxy::Ice::Object
{
public:

    void toggleCam()
    {
        toggleCam(0);
    }
    void toggleCam(const ::Ice::Context& __ctx)
    {
        toggleCam(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_toggleCam(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_toggleCam(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_toggleCam(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_toggleCam(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_toggleCam(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_toggleCam(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_toggleCam(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_toggleCam(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_toggleCam()
    {
        return begin_toggleCam(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_toggleCam(const ::Ice::Context& __ctx)
    {
        return begin_toggleCam(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_toggleCam(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_toggleCam(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_toggleCam(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_toggleCam(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_toggleCam(const ::jderobot::Callback_ArDroneExtra_toggleCamPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_toggleCam(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_toggleCam(const ::Ice::Context& __ctx, const ::jderobot::Callback_ArDroneExtra_toggleCamPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_toggleCam(&__ctx, __del, __cookie);
    }

    void end_toggleCam(const ::Ice::AsyncResultPtr&);
    
private:

    void toggleCam(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_toggleCam(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void land()
    {
        land(0);
    }
    void land(const ::Ice::Context& __ctx)
    {
        land(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_land(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_land(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_land(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_land(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_land(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_land(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_land(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_land(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_land()
    {
        return begin_land(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_land(const ::Ice::Context& __ctx)
    {
        return begin_land(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_land(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_land(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_land(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_land(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_land(const ::jderobot::Callback_ArDroneExtra_landPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_land(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_land(const ::Ice::Context& __ctx, const ::jderobot::Callback_ArDroneExtra_landPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_land(&__ctx, __del, __cookie);
    }

    void end_land(const ::Ice::AsyncResultPtr&);
    
private:

    void land(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_land(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void takeoff()
    {
        takeoff(0);
    }
    void takeoff(const ::Ice::Context& __ctx)
    {
        takeoff(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_takeoff(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_takeoff(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_takeoff(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_takeoff(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_takeoff(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_takeoff(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_takeoff(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_takeoff(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_takeoff()
    {
        return begin_takeoff(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_takeoff(const ::Ice::Context& __ctx)
    {
        return begin_takeoff(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_takeoff(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_takeoff(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_takeoff(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_takeoff(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_takeoff(const ::jderobot::Callback_ArDroneExtra_takeoffPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_takeoff(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_takeoff(const ::Ice::Context& __ctx, const ::jderobot::Callback_ArDroneExtra_takeoffPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_takeoff(&__ctx, __del, __cookie);
    }

    void end_takeoff(const ::Ice::AsyncResultPtr&);
    
private:

    void takeoff(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_takeoff(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reset()
    {
        reset(0);
    }
    void reset(const ::Ice::Context& __ctx)
    {
        reset(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reset(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reset(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reset(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reset(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reset(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reset(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reset(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reset(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reset()
    {
        return begin_reset(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& __ctx)
    {
        return begin_reset(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reset(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reset(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::jderobot::Callback_ArDroneExtra_resetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reset(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& __ctx, const ::jderobot::Callback_ArDroneExtra_resetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reset(&__ctx, __del, __cookie);
    }

    void end_reset(const ::Ice::AsyncResultPtr&);
    
private:

    void reset(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void recordOnUsb(bool __p_record)
    {
        recordOnUsb(__p_record, 0);
    }
    void recordOnUsb(bool __p_record, const ::Ice::Context& __ctx)
    {
        recordOnUsb(__p_record, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_recordOnUsb(bool __p_record, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_recordOnUsb(__p_record, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_recordOnUsb(bool __p_record, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_recordOnUsb(__p_record, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_recordOnUsb(bool __p_record, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_recordOnUsb(__p_record, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_recordOnUsb(bool __p_record, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_recordOnUsb(__p_record, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_recordOnUsb(bool __p_record)
    {
        return begin_recordOnUsb(__p_record, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_recordOnUsb(bool __p_record, const ::Ice::Context& __ctx)
    {
        return begin_recordOnUsb(__p_record, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_recordOnUsb(bool __p_record, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_recordOnUsb(__p_record, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_recordOnUsb(bool __p_record, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_recordOnUsb(__p_record, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_recordOnUsb(bool __p_record, const ::jderobot::Callback_ArDroneExtra_recordOnUsbPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_recordOnUsb(__p_record, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_recordOnUsb(bool __p_record, const ::Ice::Context& __ctx, const ::jderobot::Callback_ArDroneExtra_recordOnUsbPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_recordOnUsb(__p_record, &__ctx, __del, __cookie);
    }

    void end_recordOnUsb(const ::Ice::AsyncResultPtr&);
    
private:

    void recordOnUsb(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_recordOnUsb(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void ledAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, ::Ice::Float __p_req)
    {
        ledAnimation(__p_type, __p_duration, __p_req, 0);
    }
    void ledAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, ::Ice::Float __p_req, const ::Ice::Context& __ctx)
    {
        ledAnimation(__p_type, __p_duration, __p_req, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ledAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, ::Ice::Float __p_req, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_ledAnimation(__p_type, __p_duration, __p_req, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_ledAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, ::Ice::Float __p_req, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ledAnimation(__p_type, __p_duration, __p_req, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ledAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, ::Ice::Float __p_req, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_ledAnimation(__p_type, __p_duration, __p_req, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ledAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, ::Ice::Float __p_req, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ledAnimation(__p_type, __p_duration, __p_req, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_ledAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, ::Ice::Float __p_req)
    {
        return begin_ledAnimation(__p_type, __p_duration, __p_req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ledAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, ::Ice::Float __p_req, const ::Ice::Context& __ctx)
    {
        return begin_ledAnimation(__p_type, __p_duration, __p_req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ledAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, ::Ice::Float __p_req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ledAnimation(__p_type, __p_duration, __p_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ledAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, ::Ice::Float __p_req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ledAnimation(__p_type, __p_duration, __p_req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ledAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, ::Ice::Float __p_req, const ::jderobot::Callback_ArDroneExtra_ledAnimationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ledAnimation(__p_type, __p_duration, __p_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ledAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, ::Ice::Float __p_req, const ::Ice::Context& __ctx, const ::jderobot::Callback_ArDroneExtra_ledAnimationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ledAnimation(__p_type, __p_duration, __p_req, &__ctx, __del, __cookie);
    }

    void end_ledAnimation(const ::Ice::AsyncResultPtr&);
    
private:

    void ledAnimation(::Ice::Int, ::Ice::Float, ::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ledAnimation(::Ice::Int, ::Ice::Float, ::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void flightAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration)
    {
        flightAnimation(__p_type, __p_duration, 0);
    }
    void flightAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, const ::Ice::Context& __ctx)
    {
        flightAnimation(__p_type, __p_duration, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_flightAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_flightAnimation(__p_type, __p_duration, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_flightAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_flightAnimation(__p_type, __p_duration, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_flightAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_flightAnimation(__p_type, __p_duration, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_flightAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_flightAnimation(__p_type, __p_duration, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_flightAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration)
    {
        return begin_flightAnimation(__p_type, __p_duration, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_flightAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, const ::Ice::Context& __ctx)
    {
        return begin_flightAnimation(__p_type, __p_duration, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_flightAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_flightAnimation(__p_type, __p_duration, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_flightAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_flightAnimation(__p_type, __p_duration, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_flightAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, const ::jderobot::Callback_ArDroneExtra_flightAnimationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_flightAnimation(__p_type, __p_duration, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_flightAnimation(::Ice::Int __p_type, ::Ice::Float __p_duration, const ::Ice::Context& __ctx, const ::jderobot::Callback_ArDroneExtra_flightAnimationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_flightAnimation(__p_type, __p_duration, &__ctx, __del, __cookie);
    }

    void end_flightAnimation(const ::Ice::AsyncResultPtr&);
    
private:

    void flightAnimation(::Ice::Int, ::Ice::Float, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_flightAnimation(::Ice::Int, ::Ice::Float, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void flatTrim()
    {
        flatTrim(0);
    }
    void flatTrim(const ::Ice::Context& __ctx)
    {
        flatTrim(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_flatTrim(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_flatTrim(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_flatTrim(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_flatTrim(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_flatTrim(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_flatTrim(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_flatTrim(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_flatTrim(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_flatTrim()
    {
        return begin_flatTrim(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_flatTrim(const ::Ice::Context& __ctx)
    {
        return begin_flatTrim(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_flatTrim(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_flatTrim(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_flatTrim(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_flatTrim(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_flatTrim(const ::jderobot::Callback_ArDroneExtra_flatTrimPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_flatTrim(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_flatTrim(const ::Ice::Context& __ctx, const ::jderobot::Callback_ArDroneExtra_flatTrimPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_flatTrim(&__ctx, __del, __cookie);
    }

    void end_flatTrim(const ::Ice::AsyncResultPtr&);
    
private:

    void flatTrim(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_flatTrim(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_secure(bool __secure) const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_twoway() const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_oneway() const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_batchOneway() const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_datagram() const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_batchDatagram() const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_compress(bool __compress) const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ArDroneExtra> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ArDroneExtra*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace jderobot
{

class ArDroneExtra : virtual public ::Ice::Object
{
public:

    typedef ArDroneExtraPrx ProxyType;
    typedef ArDroneExtraPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void toggleCam(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___toggleCam(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void land(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___land(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void takeoff(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___takeoff(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reset(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reset(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void recordOnUsb(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___recordOnUsb(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void ledAnimation(::Ice::Int, ::Ice::Float, ::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ledAnimation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void flightAnimation(::Ice::Int, ::Ice::Float, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___flightAnimation(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void flatTrim(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___flatTrim(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const ArDroneExtra& l, const ArDroneExtra& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ArDroneExtra& l, const ArDroneExtra& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace jderobot
{

template<class T>
class CallbackNC_ArDroneExtra_toggleCam : public Callback_ArDroneExtra_toggleCam_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ArDroneExtra_toggleCam(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ArDroneExtra_toggleCamPtr
newCallback_ArDroneExtra_toggleCam(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_toggleCam<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_toggleCamPtr
newCallback_ArDroneExtra_toggleCam(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_toggleCam<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_toggleCamPtr
newCallback_ArDroneExtra_toggleCam(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_toggleCam<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_toggleCamPtr
newCallback_ArDroneExtra_toggleCam(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_toggleCam<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ArDroneExtra_toggleCam : public Callback_ArDroneExtra_toggleCam_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ArDroneExtra_toggleCam(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ArDroneExtra_toggleCamPtr
newCallback_ArDroneExtra_toggleCam(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_toggleCam<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_toggleCamPtr
newCallback_ArDroneExtra_toggleCam(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_toggleCam<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_toggleCamPtr
newCallback_ArDroneExtra_toggleCam(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_toggleCam<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_toggleCamPtr
newCallback_ArDroneExtra_toggleCam(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_toggleCam<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ArDroneExtra_land : public Callback_ArDroneExtra_land_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ArDroneExtra_land(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ArDroneExtra_landPtr
newCallback_ArDroneExtra_land(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_land<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_landPtr
newCallback_ArDroneExtra_land(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_land<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_landPtr
newCallback_ArDroneExtra_land(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_land<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_landPtr
newCallback_ArDroneExtra_land(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_land<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ArDroneExtra_land : public Callback_ArDroneExtra_land_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ArDroneExtra_land(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ArDroneExtra_landPtr
newCallback_ArDroneExtra_land(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_land<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_landPtr
newCallback_ArDroneExtra_land(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_land<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_landPtr
newCallback_ArDroneExtra_land(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_land<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_landPtr
newCallback_ArDroneExtra_land(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_land<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ArDroneExtra_takeoff : public Callback_ArDroneExtra_takeoff_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ArDroneExtra_takeoff(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ArDroneExtra_takeoffPtr
newCallback_ArDroneExtra_takeoff(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_takeoff<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_takeoffPtr
newCallback_ArDroneExtra_takeoff(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_takeoff<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_takeoffPtr
newCallback_ArDroneExtra_takeoff(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_takeoff<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_takeoffPtr
newCallback_ArDroneExtra_takeoff(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_takeoff<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ArDroneExtra_takeoff : public Callback_ArDroneExtra_takeoff_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ArDroneExtra_takeoff(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ArDroneExtra_takeoffPtr
newCallback_ArDroneExtra_takeoff(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_takeoff<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_takeoffPtr
newCallback_ArDroneExtra_takeoff(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_takeoff<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_takeoffPtr
newCallback_ArDroneExtra_takeoff(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_takeoff<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_takeoffPtr
newCallback_ArDroneExtra_takeoff(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_takeoff<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ArDroneExtra_reset : public Callback_ArDroneExtra_reset_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ArDroneExtra_reset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ArDroneExtra_resetPtr
newCallback_ArDroneExtra_reset(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_reset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_resetPtr
newCallback_ArDroneExtra_reset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_reset<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_resetPtr
newCallback_ArDroneExtra_reset(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_reset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_resetPtr
newCallback_ArDroneExtra_reset(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_reset<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ArDroneExtra_reset : public Callback_ArDroneExtra_reset_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ArDroneExtra_reset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ArDroneExtra_resetPtr
newCallback_ArDroneExtra_reset(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_reset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_resetPtr
newCallback_ArDroneExtra_reset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_reset<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_resetPtr
newCallback_ArDroneExtra_reset(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_reset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_resetPtr
newCallback_ArDroneExtra_reset(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_reset<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ArDroneExtra_recordOnUsb : public Callback_ArDroneExtra_recordOnUsb_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ArDroneExtra_recordOnUsb(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ArDroneExtra_recordOnUsbPtr
newCallback_ArDroneExtra_recordOnUsb(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_recordOnUsb<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_recordOnUsbPtr
newCallback_ArDroneExtra_recordOnUsb(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_recordOnUsb<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_recordOnUsbPtr
newCallback_ArDroneExtra_recordOnUsb(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_recordOnUsb<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_recordOnUsbPtr
newCallback_ArDroneExtra_recordOnUsb(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_recordOnUsb<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ArDroneExtra_recordOnUsb : public Callback_ArDroneExtra_recordOnUsb_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ArDroneExtra_recordOnUsb(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ArDroneExtra_recordOnUsbPtr
newCallback_ArDroneExtra_recordOnUsb(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_recordOnUsb<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_recordOnUsbPtr
newCallback_ArDroneExtra_recordOnUsb(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_recordOnUsb<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_recordOnUsbPtr
newCallback_ArDroneExtra_recordOnUsb(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_recordOnUsb<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_recordOnUsbPtr
newCallback_ArDroneExtra_recordOnUsb(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_recordOnUsb<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ArDroneExtra_ledAnimation : public Callback_ArDroneExtra_ledAnimation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ArDroneExtra_ledAnimation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ArDroneExtra_ledAnimationPtr
newCallback_ArDroneExtra_ledAnimation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_ledAnimation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_ledAnimationPtr
newCallback_ArDroneExtra_ledAnimation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_ledAnimation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_ledAnimationPtr
newCallback_ArDroneExtra_ledAnimation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_ledAnimation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_ledAnimationPtr
newCallback_ArDroneExtra_ledAnimation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_ledAnimation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ArDroneExtra_ledAnimation : public Callback_ArDroneExtra_ledAnimation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ArDroneExtra_ledAnimation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ArDroneExtra_ledAnimationPtr
newCallback_ArDroneExtra_ledAnimation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_ledAnimation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_ledAnimationPtr
newCallback_ArDroneExtra_ledAnimation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_ledAnimation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_ledAnimationPtr
newCallback_ArDroneExtra_ledAnimation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_ledAnimation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_ledAnimationPtr
newCallback_ArDroneExtra_ledAnimation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_ledAnimation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ArDroneExtra_flightAnimation : public Callback_ArDroneExtra_flightAnimation_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ArDroneExtra_flightAnimation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ArDroneExtra_flightAnimationPtr
newCallback_ArDroneExtra_flightAnimation(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_flightAnimation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_flightAnimationPtr
newCallback_ArDroneExtra_flightAnimation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_flightAnimation<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_flightAnimationPtr
newCallback_ArDroneExtra_flightAnimation(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_flightAnimation<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_flightAnimationPtr
newCallback_ArDroneExtra_flightAnimation(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_flightAnimation<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ArDroneExtra_flightAnimation : public Callback_ArDroneExtra_flightAnimation_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ArDroneExtra_flightAnimation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ArDroneExtra_flightAnimationPtr
newCallback_ArDroneExtra_flightAnimation(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_flightAnimation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_flightAnimationPtr
newCallback_ArDroneExtra_flightAnimation(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_flightAnimation<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_flightAnimationPtr
newCallback_ArDroneExtra_flightAnimation(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_flightAnimation<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_flightAnimationPtr
newCallback_ArDroneExtra_flightAnimation(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_flightAnimation<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ArDroneExtra_flatTrim : public Callback_ArDroneExtra_flatTrim_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ArDroneExtra_flatTrim(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ArDroneExtra_flatTrimPtr
newCallback_ArDroneExtra_flatTrim(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_flatTrim<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_flatTrimPtr
newCallback_ArDroneExtra_flatTrim(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_flatTrim<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_flatTrimPtr
newCallback_ArDroneExtra_flatTrim(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_flatTrim<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ArDroneExtra_flatTrimPtr
newCallback_ArDroneExtra_flatTrim(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ArDroneExtra_flatTrim<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ArDroneExtra_flatTrim : public Callback_ArDroneExtra_flatTrim_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ArDroneExtra_flatTrim(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ArDroneExtra_flatTrimPtr
newCallback_ArDroneExtra_flatTrim(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_flatTrim<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_flatTrimPtr
newCallback_ArDroneExtra_flatTrim(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_flatTrim<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_flatTrimPtr
newCallback_ArDroneExtra_flatTrim(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_flatTrim<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ArDroneExtra_flatTrimPtr
newCallback_ArDroneExtra_flatTrim(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ArDroneExtra_flatTrim<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
